{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pydeflate","text":"<p>pydeflate is a Python package for converting between current and constant prices, with built-in currency conversion support. It handles inflation/deflation adjustments using data from multiple authoritative sources (IMF, World Bank, OECD DAC) and combines price deflators with exchange rates for accurate cross-country, cross-currency, and cross-time comparisons.</p> Get Started Deflation Guide Data Sources FAQ"},{"location":"#what-can-pydeflate-do","title":"What can pydeflate do?","text":"<ul> <li>Convert current prices to constant prices</li> <li>Convert constant prices to current prices</li> <li>Convert between currencies in both current and constant prices</li> <li>Combine deflation and exchange in a single operation</li> <li>Work with multiple data sources (IMF, World Bank, OECD DAC)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install pydeflate using pip:</p> <pre><code>pip install pydeflate --upgrade\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here's a simple example that converts current USD values to constant 2015 EUR:</p> <pre><code>from pydeflate import imf_gdp_deflate, set_pydeflate_path\nimport pandas as pd\n\n# Set up cache directory (only needed once per script)\nset_pydeflate_path(\"path/to/data/folder\")\n\n# Your data in current USD prices\ndata = {\n    'iso_code': ['FRA', 'USA', 'GTM'],\n    'year': [2017, 2018, 2019],\n    'value': [50, 100, 200]\n}\ndf = pd.DataFrame(data)\n\n# Convert to constant 2015 EUR\nresult = imf_gdp_deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"USA\",  # USD\n    target_currency=\"FRA\",  # EUR\n    id_column=\"iso_code\",\n    value_column=\"value\",\n    target_value_column=\"value_constant\"\n)\n\nprint(result)\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#multiple-data-sources","title":"Multiple Data Sources","text":"<p>Choose from three authoritative sources:</p> <ul> <li>IMF World Economic Outlook: GDP deflators, CPI (period average and end-of-period), with future estimates</li> <li>World Bank: GDP deflators (standard and linked series), CPI, and PPP exchange rates</li> <li>OECD DAC: Specialized deflators and exchange rates for development assistance</li> </ul>"},{"location":"#flexible-conversions","title":"Flexible Conversions","text":"<pre><code># Current \u2192 Constant prices\nimf_gdp_deflate(df, base_year=2015, ...)\n\n# Currency conversion only\nimf_exchange(df, source_currency=\"USA\", target_currency=\"GBR\", ...)\n\n# Combined deflation + currency conversion\nwb_cpi_deflate(df, base_year=2020, source_currency=\"LCU\", target_currency=\"USD\", ...)\n</code></pre>"},{"location":"#advanced-features","title":"Advanced Features","text":"<ul> <li>Plugin System: Register custom data sources</li> <li>Context Management: Multiple independent cache directories</li> <li>Schema Validation: Optional data quality checks</li> </ul>"},{"location":"#example-use-cases","title":"Example Use Cases","text":""},{"location":"#oecd-dac","title":"OECD DAC","text":"<p>Track aid flows in constant prices:</p> <pre><code># Convert ODA from current USD to constant 2018 USD using DAC deflators\noecd_dac_deflate(\n    data=oda_df,\n    base_year=2018,\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    ...\n)\n</code></pre>"},{"location":"#world-bank","title":"World Bank","text":"<p>Compare GDP across countries and time:</p> <pre><code># Convert GDP from local currency to constant 2015 USD\nwb_gdp_linked_deflate(\n    data=gdp_df,\n    base_year=2015,\n    source_currency=\"LCU\",  # Local currency units\n    target_currency=\"USA\",\n    ...\n)\n</code></pre>"},{"location":"#imf","title":"IMF","text":"<p>Adjust financial data for inflation:</p> <pre><code># Convert revenue from current to constant prices using CPI\nimf_cpi_deflate(\n    data=revenue_df,\n    base_year=2020,\n    source_currency=\"GBR\",\n    target_currency=\"GBR\",  # Same currency, just adjust for inflation\n    ...\n)\n</code></pre>"},{"location":"#why-pydeflate","title":"Why pydeflate?","text":""},{"location":"#why-convert-to-constant-prices-and-a-common-currency","title":"Why convert to constant prices (and a common currency)?","text":"<p>Most money series mix price changes with quantities. To measure real change, convert nominal values to constant prices (inflation\u2011adjusted). For cross\u2011country work, also express everything in a common currency. pydeflate performs both steps\u2014price adjustment and FX conversion\u2014in one, reproducible operation.</p>"},{"location":"#what-problem-does-this-solve","title":"What problem does this solve?","text":"<ul> <li>Illusory growth: Nominal increases can be just inflation. </li> <li>Cross\u2011country noise: FX swings obscure real trends. </li> <li>Incomparable targets: Budgets/pledges in current prices aren\u2019t comparable across years.</li> </ul>"},{"location":"#when-should-you-convert-to-constant-prices","title":"When should you convert to constant prices?","text":"<ul> <li>Analyses spanning &gt;1\u20132 years or periods with non\u2011trivial inflation. </li> <li>Cross\u2011country / multi\u2011currency comparisons (aid, revenues, investment). </li> <li>Before computing growth rates, elasticities, or price/volume decompositions.</li> </ul>"},{"location":"#choose-the-right-index","title":"Choose the right index","text":"<ul> <li>GDP deflator: economy\u2011wide prices; good for macro aggregates and public spending.</li> <li>CPI: household purchasing power; good for wages, transfers, poverty lines.</li> <li>OECD DAC deflators: for official development assistance reporting.</li> <li>Sector indices (where available) for narrow baskets.</li> </ul> <p>Rule of thumb: macro volumes \u2192 GDP deflator; household purchasing power \u2192 CPI.</p>"},{"location":"#why-use-pydeflate","title":"Why use pydeflate?","text":"<ul> <li>Accurate: Uses official data from IMF, World Bank, and OECD</li> <li>Simple: Intuitive API with sensible defaults</li> <li>Flexible: Multiple sources and deflator types</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started - Detailed setup and DataFrame requirements</li> <li>Deflation Guide - All deflation methods with examples</li> <li>Currency Exchange - Currency conversion examples</li> <li>Data Sources - When to use IMF vs World Bank vs OECD DAC</li> </ul>"},{"location":"#version-note","title":"Version Note","text":"<p>Breaking Changes in v2.0</p> <p>pydeflate v2 includes API changes that break backwards compatibility. The legacy <code>deflate()</code> function is deprecated and will be removed in future versions. Use the new source-specific functions like <code>imf_gdp_deflate()</code> instead.</p>"},{"location":"#license","title":"License","text":"<p>MIT License. See LICENSE for details.</p>"},{"location":"#support","title":"Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Source Code: GitHub Repository</li> <li>PyPI: pydeflate on PyPI</li> </ul>"},{"location":"data-sources/","title":"Data Sources","text":"<p>pydeflate currently supports three authoritative data sources: IMF, World Bank, and OECD DAC. This guide helps you choose the right source for your use case.</p>"},{"location":"data-sources/#source-comparison","title":"Source Comparison","text":"Feature IMF World Bank OECD DAC Primary Use Economic forecasting Development indicators Development assistance Country Coverage ~190 countries ~200 countries ~60 donors Time Range 1980-present + forecasts 1960-present 1960-present Update Frequency Biannual (April, October) Annual Annual Deflators GDP, CPI (avg &amp; EOP) GDP, GDP linked, CPI DAC deflator Exchange Rates WEO rates WDI rates DAC exchange rates Future Estimates Yes (~5 years) No No PPP Rates No Yes No"},{"location":"data-sources/#imf-world-economic-outlook","title":"IMF World Economic Outlook","text":""},{"location":"data-sources/#overview","title":"Overview","text":"<p>The International Monetary Fund's World Economic Outlook (WEO) database provides economic indicators with estimates for future years.</p> <p>Data URL: https://www.imf.org/en/Publications/WEO</p>"},{"location":"data-sources/#available-functions","title":"Available Functions","text":"<pre><code>from pydeflate import (\n    imf_gdp_deflate,    # GDP deflator\n    imf_cpi_deflate,    # CPI (period average)\n    imf_cpi_e_deflate,  # CPI (end-of-period)\n    imf_exchange        # Exchange rates\n)\n</code></pre>"},{"location":"data-sources/#strengths","title":"Strengths","text":"<ul> <li>Future estimates: Includes ~5 year forecasts for GDP deflators and CPI</li> <li>Comprehensive: Covers ~190 countries with consistent methodology</li> <li>Frequent updates: Published twice yearly (April, October)</li> <li>Economic focus: Ideal for macroeconomic analysis</li> </ul>"},{"location":"data-sources/#limitations","title":"Limitations","text":"<ul> <li>Estimates subject to revision</li> <li>Exchange rates are derived based on WEO data (instead of published directly as an indicator)</li> </ul>"},{"location":"data-sources/#when-to-use-imf","title":"When to Use IMF","text":"<p>Use IMF data when you need:</p> <ul> <li> <p>Future year estimates <pre><code># Project 2024-2026 aid budgets to constant 2023 prices\nimf_gdp_deflate(df, base_year=2023, ...)\n</code></pre></p> </li> <li> <p>Consistency with IMF publications <pre><code># Ensure compatibility with IMF reports\nimf_cpi_deflate(df, base_year=2020, ...)\n</code></pre></p> </li> <li> <p>End-of-period CPI for financial reporting   <pre><code># December year-end adjustments\nimf_cpi_e_deflate(df, base_year=2018, ...)\n</code></pre></p> </li> </ul>"},{"location":"data-sources/#data-characteristics","title":"Data Characteristics","text":"<ul> <li>GDP deflator: Broad measure of price changes in the economy</li> <li>CPI (period average): Average monthly CPI across the year</li> <li>CPI (end-of-period): December CPI value</li> <li>Exchange rates: Yearly average, derived from WEO data</li> </ul>"},{"location":"data-sources/#world-bank","title":"World Bank","text":""},{"location":"data-sources/#overview_1","title":"Overview","text":"<p>The World Bank provides a comprehensive collection of development indicators spanning decades.</p> <p>Data URL: https://databank.worldbank.org/</p>"},{"location":"data-sources/#available-functions_1","title":"Available Functions","text":"<pre><code>from pydeflate import (\n    wb_gdp_deflate,         # GDP deflator\n    wb_gdp_linked_deflate,  # Linked GDP deflator\n    wb_cpi_deflate,         # CPI\n    wb_exchange,            # Market exchange rates\n    wb_exchange_ppp         # PPP exchange rates\n)\n</code></pre>"},{"location":"data-sources/#strengths_1","title":"Strengths","text":"<ul> <li>Deep history: Data from 1960 onwards</li> <li>Broad coverage: ~200 countries and territories</li> <li>Linked deflators: Includes estimates for some gaps in the series.</li> <li>PPP rates: Purchasing power parity comparisons</li> <li>Development focus: Tailored for development indicators</li> </ul>"},{"location":"data-sources/#limitations_1","title":"Limitations","text":"<ul> <li>No future estimates</li> <li>Annual updates</li> <li>Some historical gaps for smaller countries</li> </ul>"},{"location":"data-sources/#when-to-use-world-bank","title":"When to Use World Bank","text":"<p>Use World Bank data when you need:</p> <ul> <li> <p>Long time series (20+ years)   <pre><code># Analyze trends from 1980-2020\nwb_gdp_linked_deflate(df, base_year=2010, ...)\n</code></pre></p> </li> <li> <p>PPP comparisons for living standards   <pre><code># Compare GDP per capita across countries\nwb_exchange_ppp(df, source_currency=\"LCU\", target_currency=\"USA\", ...)\n</code></pre></p> </li> <li> <p>Consistency with World Bank data <pre><code># Match World Development Indicators\nwb_gdp_deflate(df, base_year=2015, ...)\n</code></pre></p> </li> <li> <p>GDP series with some gaps filled <pre><code># Handle breaks in deflator series\nwb_gdp_linked_deflate(df, base_year=2015, ...)\n</code></pre></p> </li> </ul>"},{"location":"data-sources/#data-characteristics_1","title":"Data Characteristics","text":"<ul> <li>GDP deflator: Annual percentage change, standard series</li> <li>Linked GDP deflator: Annual percentage change, with some gaps filled</li> <li>CPI: Consumer price index (period average)</li> <li>Exchange rates (market): From IMF IFS, yearly average</li> <li>Exchange rates (PPP): Purchasing power parity conversion factors</li> </ul>"},{"location":"data-sources/#oecd-development-assistance-committee","title":"OECD Development Assistance Committee","text":""},{"location":"data-sources/#overview_2","title":"Overview","text":"<p>The OECD DAC provides specialized deflators and exchange rates for Official Development Assistance (ODA), maintained specifically for aid flow analysis.</p> <p>Data URL: https://www.oecd.org/dac/</p>"},{"location":"data-sources/#available-functions_2","title":"Available Functions","text":"<pre><code>from pydeflate import (\n    oecd_dac_deflate,   # DAC deflator\n    oecd_dac_exchange   # DAC exchange rates\n)\n</code></pre>"},{"location":"data-sources/#strengths_2","title":"Strengths","text":"<ul> <li>ODA-specific: Designed for development assistance analysis</li> <li>DAC standard: Official methodology for aid reporting</li> <li>Consistency: Aligned with OECD.Stat and CRS database</li> <li>Donor focus: Optimized for donor country reporting</li> </ul>"},{"location":"data-sources/#limitations_2","title":"Limitations","text":"<ul> <li>Limited to ODA context (not suitable for general economic analysis)</li> <li>Smaller country coverage (donors)</li> <li>Single deflator type (no separate CPI)</li> </ul>"},{"location":"data-sources/#when-to-use-oecd-dac","title":"When to Use OECD DAC","text":"<p>Use DAC data when working with:</p> <ul> <li> <p>Official Development Assistance <pre><code># Convert ODA to constant prices\noecd_dac_deflate(df, base_year=2018, ...)\n</code></pre></p> </li> <li> <p>DAC reporting requirements <pre><code># Ensure compliance with DAC standards\noecd_dac_deflate(df, base_year=2020, ...)\n</code></pre></p> </li> <li> <p>Creditor Reporting System (CRS) data <pre><code># Match CRS deflation methodology\noecd_dac_exchange(df, source_currency=\"LCU\", target_currency=\"USA\", ...)\n</code></pre></p> </li> </ul>"},{"location":"data-sources/#dac-codes","title":"DAC Codes","text":"<p>DAC uses its own country coding system. Enable with <code>use_source_codes=True</code>:</p> <pre><code># DAC donor codes (examples):\n# 4   = France\n# 12  = United Kingdom\n# 302 = United States\n# 701 = Japan\n\ndata = {\n    'dac_code': [4, 12, 302, 701],\n    'year': [2015, 2016, 2017, 2018],\n    'oda': [11400, 18700, 30900, 15500]\n}\n\nresult = oecd_dac_deflate(\n    data=pd.DataFrame(data),\n    base_year=2018,\n    id_column=\"dac_code\",\n    use_source_codes=True,  # Use DAC codes\n    ...\n)\n</code></pre>"},{"location":"data-sources/#data-characteristics_2","title":"Data Characteristics","text":"<ul> <li>DAC deflator: Composite deflator for aid flows</li> <li>Exchange rates: Yearly average rates used in DAC reporting</li> </ul>"},{"location":"data-sources/#choosing-the-right-source","title":"Choosing the Right Source","text":""},{"location":"data-sources/#decision-tree","title":"Decision Tree","text":"<pre><code>\u250c\u2500 Need future estimates?\n\u2502  \u2514\u2500 YES \u2192 Use IMF\n\u2502\n\u251c\u2500 Working with ODA data?\n\u2502  \u2514\u2500 YES \u2192 Use OECD DAC\n\u2502\n\u251c\u2500 Need PPP exchange rates?\n\u2502  \u2514\u2500 YES \u2192 Use World Bank (wb_exchange_ppp)\n\u2502\n\u251c\u2500 Time series &gt; 20 years?\n\u2502  \u2514\u2500 YES \u2192 Use World Bank (wb_gdp_linked_deflate)\n\u2502\n\u2514\u2500 General economic analysis?\n   \u2514\u2500 Use IMF or World Bank\n</code></pre>"},{"location":"data-sources/#by-use-case","title":"By Use Case","text":"Use Case Recommended Source GDP analysis, current/recent years IMF (<code>imf_gdp_deflate</code>) GDP analysis, historical (1960-2000) World Bank (<code>wb_gdp_linked_deflate</code>) Consumer prices, inflation IMF (<code>imf_cpi_deflate</code>) or World Bank (<code>wb_cpi_deflate</code>) Wage/salary adjustments IMF (<code>imf_cpi_deflate</code>) Cross-country welfare comparison World Bank (<code>wb_exchange_ppp</code>) ODA/development finance OECD DAC (<code>oecd_dac_deflate</code>) Budget forecasting (future years) IMF (<code>imf_gdp_deflate</code>) Year-end financial reporting IMF (<code>imf_cpi_e_deflate</code>) Long-term economic trends World Bank (<code>wb_gdp_linked_deflate</code>)"},{"location":"data-sources/#comparing-sources","title":"Comparing Sources","text":"<p>You can compare results across sources:</p> <pre><code>from pydeflate import imf_gdp_deflate, wb_gdp_deflate, set_pydeflate_path\nimport pandas as pd\n\nset_pydeflate_path(\"./data\")\n\n# Test data\ndata = {\n    'country': ['USA', 'GBR', 'FRA'],\n    'year': [2015, 2016, 2017],\n    'value': [1000, 1000, 1000]\n}\ndf = pd.DataFrame(data)\n\n# Apply both sources\nimf_result = imf_gdp_deflate(\n    df, base_year=2015, source_currency=\"USA\", target_currency=\"USA\",\n    id_column=\"country\", value_column=\"value\", target_value_column=\"value_imf\"\n)\n\nwb_result = wb_gdp_deflate(\n    df, base_year=2015, source_currency=\"USA\", target_currency=\"USA\",\n    id_column=\"country\", value_column=\"value\", target_value_column=\"value_wb\"\n)\n\n# Merge and compare\ncomparison = df.merge(\n    imf_result[['country', 'year', 'value_imf']],\n    on=['country', 'year']\n).merge(\n    wb_result[['country', 'year', 'value_wb']],\n    on=['country', 'year']\n)\n\ncomparison['difference'] = comparison['value_imf'] - comparison['value_wb']\nprint(comparison)\n</code></pre>"},{"location":"data-sources/#data-update-schedule","title":"Data Update Schedule","text":"Source Release Schedule Typical Release Months IMF WEO Biannual April, October World Bank Annual September-October OECD DAC Biannual April, December <p>pydeflate caches data locally and checks for updates. If cached data is &gt;50 days old, you'll see a warning to refresh.</p>"},{"location":"data-sources/#data-attribution","title":"Data Attribution","text":"<p>pydeflate relies on publicly available data from:</p> <ul> <li>IMF World Economic Outlook: https://www.imf.org/en/Publications/WEO</li> <li>World Bank DataBank: https://databank.worldbank.org/</li> <li>OECD DAC: https://www.oecd.org/dac/</li> </ul> <p>This data is provided based on the terms and conditions set by the original sources.</p>"},{"location":"data-sources/#next-steps","title":"Next Steps","text":"<ul> <li>Deflation Guide - Apply deflators from each source</li> <li>Currency Exchange - Use exchange rates from each source</li> <li>Advanced Topics - Register custom data sources</li> </ul>"},{"location":"deflation/","title":"Deflation Guide","text":"<p>This guide covers all deflation methods in pydeflate with practical examples. Deflation converts between current and constant prices, adjusting for inflation and exchange rate changes.</p>"},{"location":"deflation/#understanding-deflation","title":"Understanding Deflation","text":"<p>Current prices reflect the value at the time of measurement, including inflation.</p> <p>Constant prices adjust values to a specific base year, removing inflation effects for accurate comparisons over time.</p> <p>pydeflate handles both:</p> <ul> <li>Current \u2192 Constant (deflation): Remove inflation</li> <li>Constant \u2192 Current (inflation): Add inflation back</li> </ul>"},{"location":"deflation/#imf-deflators","title":"IMF Deflators","text":"<p>The IMF World Economic Outlook provides GDP deflators and CPI data with estimates for future years.</p>"},{"location":"deflation/#gdp-deflator-imf","title":"GDP Deflator (IMF)","text":"<p>Use GDP deflators when working with GDP or broad economic indicators.</p> <pre><code>from pydeflate import imf_gdp_deflate, set_pydeflate_path\nimport pandas as pd\n\nset_pydeflate_path(\"./pydeflate_data\")\n\n# Example: Convert GDP from current USD to constant 2015 USD\ndata = {\n    'country': ['USA', 'GBR', 'JPN', 'FRA'],\n    'year': [2017, 2018, 2019, 2020],\n    'gdp': [19500, 2900, 4900, 2600]  # Billions, current USD\n}\ndf = pd.DataFrame(data)\n\nresult = imf_gdp_deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"USA\",      # Current USD\n    target_currency=\"USA\",      # Constant USD (same currency)\n    id_column=\"country\",\n    value_column=\"gdp\",\n    target_value_column=\"gdp_constant_2015\"\n)\n\nprint(result[['country', 'year', 'gdp', 'gdp_constant_2015']])\n</code></pre> <p>When to use:</p> <ul> <li>Analyzing GDP trends</li> <li>Comparing economic output over time</li> <li>Working with national accounts data</li> </ul>"},{"location":"deflation/#cpi-period-average","title":"CPI (Period Average)","text":"<p>Consumer Price Index measures changes in the price level of consumer goods and services.</p> <pre><code>from pydeflate import imf_cpi_deflate\n\n# Example: Adjust household expenditure for inflation\ndata = {\n    'country': ['USA', 'GBR', 'DEU'],\n    'year': [2018, 2019, 2020],\n    'expenditure': [50000, 45000, 55000]  # Current prices\n}\ndf = pd.DataFrame(data)\n\nresult = imf_cpi_deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"LCU\",      # Local currency\n    target_currency=\"LCU\",      # Keep in local currency\n    id_column=\"country\",\n    value_column=\"expenditure\",\n    target_value_column=\"expenditure_2015\"\n)\n</code></pre> <p>When to use:</p> <ul> <li>Household expenditure analysis</li> <li>Wage comparisons</li> <li>Cost of living adjustments</li> <li>Consumer-focused metrics</li> </ul>"},{"location":"deflation/#cpi-end-of-period","title":"CPI (End-of-Period)","text":"<p>End-of-period CPI uses December values instead of annual averages.</p> <pre><code>from pydeflate import imf_cpi_e_deflate\n\n# Example: Adjust financial data using end-of-period CPI\ndata = {\n    'country': ['USA', 'CAN'],\n    'year': [2019, 2020],\n    'revenue': [1000000, 1100000]\n}\ndf = pd.DataFrame(data)\n\nresult = imf_cpi_e_deflate(\n    data=df,\n    base_year=2018,\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    value_column=\"revenue\",\n    target_value_column=\"revenue_2018\"\n)\n</code></pre> <p>When to use:</p> <ul> <li>Financial reporting (December year-end)</li> <li>Comparing point-in-time values</li> <li>When data represents end-of-year snapshots</li> </ul>"},{"location":"deflation/#world-bank-deflators","title":"World Bank Deflators","text":"<p>World Bank provides deflators derived from national accounts and IFS data.</p>"},{"location":"deflation/#gdp-deflator-world-bank","title":"GDP Deflator (World Bank)","text":"<pre><code>from pydeflate import wb_gdp_deflate\n\n# Example: Multi-country GDP comparison\ndata = {\n    'iso3': ['BRA', 'IND', 'CHN', 'ZAF'],\n    'year': [2015, 2016, 2017, 2018],\n    'gdp_lcu': [6000, 153000, 82000, 4900]  # Local currency, billions\n}\ndf = pd.DataFrame(data)\n\nresult = wb_gdp_deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"LCU\",      # Local currency\n    target_currency=\"USA\",      # Convert to USD\n    id_column=\"iso3\",\n    value_column=\"gdp_lcu\",\n    target_value_column=\"gdp_usd_2015\"\n)\n\nprint(result[['iso3', 'year', 'gdp_lcu', 'gdp_usd_2015']])\n</code></pre>"},{"location":"deflation/#linked-gdp-deflator","title":"Linked GDP Deflator","text":"<p>The linked GDP deflator corrects for breaks in deflator series due to base year changes.</p> <pre><code>from pydeflate import wb_gdp_linked_deflate\n\n# Example: Long time-series analysis (1980-2020)\ndata = {\n    'country': ['IND', 'IND', 'IND', 'IND'],\n    'year': [1980, 1990, 2000, 2010],\n    'investment': [100, 200, 400, 800]  # Current LCU\n}\ndf = pd.DataFrame(data)\n\nresult = wb_gdp_linked_deflate(\n    data=df,\n    base_year=2010,\n    source_currency=\"LCU\",\n    target_currency=\"LCU\",\n    id_column=\"country\",\n    value_column=\"investment\",\n    target_value_column=\"investment_2010\"\n)\n</code></pre> <p>When to use:</p> <ul> <li>Long time series (spanning multiple decades)</li> <li>Countries that frequently change base years</li> <li>Historical comparisons</li> </ul> <p>Tip</p> <p>For time series spanning 20+ years, prefer <code>wb_gdp_linked_deflate</code> over <code>wb_gdp_deflate</code> to avoid breaks in the series.</p>"},{"location":"deflation/#cpi-world-bank","title":"CPI (World Bank)","text":"<pre><code>from pydeflate import wb_cpi_deflate\n\n# Example: Cross-country price comparison\ndata = {\n    'country': ['KEN', 'UGA', 'TZA', 'RWA'],\n    'year': [2018, 2018, 2019, 2019],\n    'price_lcu': [100, 150, 120, 80]  # Local currency\n}\ndf = pd.DataFrame(data)\n\nresult = wb_cpi_deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"LCU\",\n    target_currency=\"USA\",      # Convert to common currency\n    id_column=\"country\",\n    value_column=\"price_lcu\",\n    target_value_column=\"price_usd_2015\"\n)\n</code></pre>"},{"location":"deflation/#oecd-dac-deflators","title":"OECD DAC Deflators","text":"<p>OECD DAC deflators are specifically designed for Official Development Assistance (ODA) and development finance.</p>"},{"location":"deflation/#dac-deflator","title":"DAC Deflator","text":"<pre><code>from pydeflate import oecd_dac_deflate\n\n# Example: Convert ODA from current to constant prices\ndata = {\n    'donor': ['USA', 'GBR', 'FRA', 'DEU', 'JPN'],\n    'year': [2015, 2016, 2017, 2018, 2019],\n    'oda_usd': [30900, 18700, 11400, 25000, 15500]  # Current USD, millions\n}\ndf = pd.DataFrame(data)\n\nresult = oecd_dac_deflate(\n    data=df,\n    base_year=2018,\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    id_column=\"donor\",\n    value_column=\"oda_usd\",\n    target_value_column=\"oda_2018\"\n)\n\nprint(result[['donor', 'year', 'oda_usd', 'oda_2018']])\n</code></pre> <p>When to use:</p> <ul> <li>Official Development Assistance (ODA) analysis</li> <li>Development finance tracking</li> <li>Donor comparisons</li> <li>DAC reporting requirements</li> </ul>"},{"location":"deflation/#using-dac-codes","title":"Using DAC Codes","text":"<p>If your data uses DAC donor/recipient codes:</p> <pre><code># Data with DAC codes (not ISO3)\ndata = {\n    'dac_code': [4, 12, 302, 701],  # USA=302, UK=12, France=4, etc.\n    'year': [2015, 2016, 2017, 2018],\n    'amount': [1000, 2000, 1500, 2500]\n}\ndf = pd.DataFrame(data)\n\nresult = oecd_dac_deflate(\n    data=df,\n    base_year=2018,\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    id_column=\"dac_code\",\n    use_source_codes=True,  # Important!\n    value_column=\"amount\",\n    target_value_column=\"amount_2018\"\n)\n</code></pre>"},{"location":"deflation/#converting-constant-to-current","title":"Converting Constant to Current","text":"<p>All deflation functions support reverse conversion (constant \u2192 current) using <code>to_current=True</code>.</p> <pre><code>from pydeflate import imf_gdp_deflate\n\n# Data already in constant 2015 prices\ndata = {\n    'country': ['USA', 'GBR'],\n    'year': [2018, 2019],\n    'value_2015': [1000, 1100]  # Constant 2015 USD\n}\ndf = pd.DataFrame(data)\n\n# Convert back to current prices\nresult = imf_gdp_deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    value_column=\"value_2015\",\n    target_value_column=\"value_current\",\n    to_current=True  # Reverse operation\n)\n\nprint(result[['country', 'year', 'value_2015', 'value_current']])\n</code></pre>"},{"location":"deflation/#combining-deflation-and-exchange","title":"Combining Deflation and Exchange","text":"<p>Convert both currency and price base in one operation:</p> <pre><code>from pydeflate import imf_gdp_deflate\n\n# Data in current local currency\ndata = {\n    'country': ['JPN', 'GBR', 'AUS', 'CAN'],\n    'year': [2017, 2018, 2019, 2020],\n    'budget_lcu': [5000000, 800000, 150000, 200000]  # Millions LCU\n}\ndf = pd.DataFrame(data)\n\n# Convert to constant 2015 EUR\nresult = imf_gdp_deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"LCU\",      # From local currencies\n    target_currency=\"FRA\",      # To EUR\n    id_column=\"country\",\n    value_column=\"budget_lcu\",\n    target_value_column=\"budget_eur_2015\"\n)\n\n# Now all values are in constant 2015 EUR, comparable across countries and years\n</code></pre> <p>This is particularly useful for:</p> <ul> <li>Multi-country comparisons</li> <li>International development tracking</li> <li>Cross-border economic analysis</li> </ul>"},{"location":"deflation/#choosing-a-deflator","title":"Choosing a Deflator","text":"Use Case Recommended Deflator GDP, national accounts <code>imf_gdp_deflate</code> or <code>wb_gdp_deflate</code> Long time series (20+ years) <code>wb_gdp_linked_deflate</code> Consumer prices, wages <code>imf_cpi_deflate</code> or <code>wb_cpi_deflate</code> Year-end financial data <code>imf_cpi_e_deflate</code> Development assistance (ODA) <code>oecd_dac_deflate</code> Future year estimates <code>imf_gdp_deflate</code> or <code>imf_cpi_deflate</code>"},{"location":"deflation/#complete-example","title":"Complete Example","text":"<p>Here's a complete workflow for analyzing aid effectiveness:</p> <pre><code>from pydeflate import oecd_dac_deflate, set_pydeflate_path\nimport pandas as pd\n\n# Setup\nset_pydeflate_path(\"./data\")\n\n# Load ODA data (example)\noda_data = {\n    'donor': ['USA', 'GBR', 'FRA', 'DEU', 'JPN'] * 5,\n    'year': sorted([2015, 2016, 2017, 2018, 2019] * 5),\n    'oda_current_usd': [\n        30900, 31000, 31500, 32000, 32500,\n        18700, 19000, 19200, 19500, 19800,\n        11400, 11600, 11800, 12000, 12200,\n        25000, 25500, 26000, 26500, 27000,\n        15500, 15800, 16000, 16200, 16500\n    ]\n}\ndf = pd.DataFrame(oda_data)\n\n# Convert to constant 2018 USD for comparison\nresult = oecd_dac_deflate(\n    data=df,\n    base_year=2018,\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    id_column=\"donor\",\n    value_column=\"oda_current_usd\",\n    target_value_column=\"oda_2018_usd\"\n)\n\n# Calculate real growth\nresult = result.sort_values(['donor', 'year'])\nresult['growth'] = result.groupby('donor')['oda_2018_usd'].pct_change() * 100\n\nprint(result[['donor', 'year', 'oda_current_usd', 'oda_2018_usd', 'growth']])\n</code></pre>"},{"location":"deflation/#next-steps","title":"Next Steps","text":"<ul> <li>Currency Exchange - Convert currencies without deflation</li> <li>Data Sources - Detailed comparison of IMF, World Bank, and OECD</li> <li>Advanced Topics - Error handling and advanced features</li> </ul>"},{"location":"exchange/","title":"Currency Exchange","text":"<p>This guide covers currency conversion using pydeflate's exchange rate functions. These functions convert values between currencies without adjusting for inflation.</p>"},{"location":"exchange/#when-to-use-exchange-functions","title":"When to Use Exchange Functions","text":"<p>Use exchange functions when you need to:</p> <ul> <li>Convert between currencies at current prices (no inflation adjustment)</li> <li>Apply yearly average exchange rates</li> <li>Work with historical exchange rates from authoritative sources</li> </ul> <p>For combined currency conversion + deflation, see the Deflation Guide.</p>"},{"location":"exchange/#imf-exchange-rates","title":"IMF Exchange Rates","text":"<p>IMF exchange rates are derived from the World Economic Outlook database.</p> <pre><code>from pydeflate import imf_exchange, set_pydeflate_path\nimport pandas as pd\n\nset_pydeflate_path(\"./pydeflate_data\")\n\n# Example: Convert revenues from GBP to USD\ndata = {\n    'country': ['GBR', 'GBR', 'GBR'],\n    'year': [2015, 2016, 2017],\n    'revenue_gbp': [1000, 1100, 1200]  # Current GBP\n}\ndf = pd.DataFrame(data)\n\nresult = imf_exchange(\n    data=df,\n    source_currency=\"GBR\",      # GBP\n    target_currency=\"USA\",      # USD\n    id_column=\"country\",\n    value_column=\"revenue_gbp\",\n    target_value_column=\"revenue_usd\"\n)\n\nprint(result[['country', 'year', 'revenue_gbp', 'revenue_usd']])\n</code></pre>"},{"location":"exchange/#features","title":"Features","text":"<ul> <li>Yearly average exchange rates</li> <li>Includes future estimates (3-5 years ahead)</li> <li>Consistent with IMF WEO methodology</li> </ul> <p>When to use:</p> <ul> <li>Economic analysis using IMF data</li> <li>Need future year estimates</li> <li>Consistency with IMF publications</li> </ul>"},{"location":"exchange/#world-bank-exchange-rates","title":"World Bank Exchange Rates","text":"<p>World Bank exchange rates are based on IMF International Financial Statistics (IFS).</p> <pre><code>from pydeflate import wb_exchange\n\n# Example: Multi-country sales data\ndata = {\n    'country': ['JPN', 'DEU', 'CAN', 'AUS'],\n    'year': [2018, 2018, 2019, 2019],\n    'sales_lcu': [500000, 800000, 120000, 150000]  # Local currency\n}\ndf = pd.DataFrame(data)\n\nresult = wb_exchange(\n    data=df,\n    source_currency=\"LCU\",      # Each country's currency\n    target_currency=\"USA\",      # USD\n    id_column=\"country\",\n    value_column=\"sales_lcu\",\n    target_value_column=\"sales_usd\"\n)\n\nprint(result[['country', 'year', 'sales_lcu', 'sales_usd']])\n</code></pre>"},{"location":"exchange/#features_1","title":"Features","text":"<ul> <li>Market exchange rates (yearly average)</li> <li>Broad country coverage</li> <li>Updated regularly from IFS</li> </ul> <p>When to use:</p> <ul> <li>Standard currency conversions</li> <li>Working with World Bank data</li> <li>Broad country coverage needed</li> </ul>"},{"location":"exchange/#ppp-exchange-rates","title":"PPP Exchange Rates","text":"<p>Purchasing Power Parity (PPP) exchange rates adjust for price level differences between countries.</p> <pre><code>from pydeflate import wb_exchange_ppp\n\n# Example: Compare living standards across countries\ndata = {\n    'country': ['USA', 'CHN', 'IND', 'BRA'],\n    'year': [2019, 2019, 2019, 2019],\n    'avg_income_lcu': [65000, 95000, 175000, 38000]  # Local currency\n}\ndf = pd.DataFrame(data)\n\n# Convert using PPP rates for better comparison\nresult_ppp = wb_exchange_ppp(\n    data=df,\n    source_currency=\"LCU\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    value_column=\"avg_income_lcu\",\n    target_value_column=\"avg_income_usd_ppp\"\n)\n\n# Compare with market rates\nresult_market = wb_exchange(\n    data=df,\n    source_currency=\"LCU\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    value_column=\"avg_income_lcu\",\n    target_value_column=\"avg_income_usd_market\"\n)\n\n# Merge for comparison\ncomparison = result_ppp.merge(\n    result_market[['country', 'avg_income_usd_market']],\n    on='country'\n)\nprint(comparison[['country', 'avg_income_usd_ppp', 'avg_income_usd_market']])\n</code></pre>"},{"location":"exchange/#market-vs-ppp-rates","title":"Market vs PPP Rates","text":"Aspect Market Rates PPP Rates Purpose Financial transactions Living standard comparisons Adjusts for Supply/demand Price level differences Use when Trading, investments Cross-country welfare comparisons Example Currency exchange at bank Comparing GDP per capita <p>When to use PPP:</p> <ul> <li>Comparing living standards</li> <li>GDP per capita analysis</li> <li>Cross-country welfare studies</li> <li>Removing price level bias</li> </ul> <p>When to use market rates:</p> <ul> <li>Financial flows (FDI, trade)</li> <li>Actual currency transactions</li> <li>Budget conversions</li> </ul>"},{"location":"exchange/#oecd-dac-exchange-rates","title":"OECD DAC Exchange Rates","text":"<p>DAC exchange rates are specifically used for Official Development Assistance reporting.</p> <pre><code>from pydeflate import oecd_dac_exchange\n\n# Example: Convert ODA disbursements to USD\ndata = {\n    'donor': ['GBR', 'FRA', 'DEU', 'JPN'],\n    'year': [2015, 2016, 2017, 2018],\n    'oda_lcu': [12000, 10000, 24000, 1600000]  # Local currency, millions\n}\ndf = pd.DataFrame(data)\n\nresult = oecd_dac_exchange(\n    data=df,\n    source_currency=\"LCU\",\n    target_currency=\"USA\",\n    id_column=\"donor\",\n    value_column=\"oda_lcu\",\n    target_value_column=\"oda_usd\"\n)\n\nprint(result[['donor', 'year', 'oda_lcu', 'oda_usd']])\n</code></pre>"},{"location":"exchange/#features_2","title":"Features","text":"<ul> <li>DAC-specific exchange rates</li> <li>Consistent with DAC reporting standards</li> <li>Aligned with CRS database</li> </ul> <p>When to use:</p> <ul> <li>ODA analysis</li> <li>DAC reporting requirements</li> <li>Development finance tracking</li> <li>Consistency with OECD.Stat</li> </ul>"},{"location":"exchange/#converting-between-non-usd-currencies","title":"Converting Between Non-USD Currencies","text":"<p>All sources derive cross-rates from LCU\u2192USD rates. You can convert between any two currencies:</p> <pre><code>from pydeflate import imf_exchange\n\n# Example: Convert EUR to JPY\ndata = {\n    'country': ['FRA', 'FRA', 'FRA'],\n    'year': [2016, 2017, 2018],\n    'budget_eur': [1000, 1100, 1200]\n}\ndf = pd.DataFrame(data)\n\nresult = imf_exchange(\n    data=df,\n    source_currency=\"FRA\",      # EUR (France uses EUR)\n    target_currency=\"JPN\",      # JPY\n    id_column=\"country\",\n    value_column=\"budget_eur\",\n    target_value_column=\"budget_jpy\"\n)\n\nprint(result[['year', 'budget_eur', 'budget_jpy']])\n</code></pre> <p>The conversion uses the formula: <pre><code>EUR \u2192 JPY = EUR \u2192 USD \u2192 JPY\n</code></pre></p>"},{"location":"exchange/#working-with-local-currencies","title":"Working with Local Currencies","text":"<p>The special code <code>\"LCU\"</code> (Local Currency Units) allows each country to use its own currency:</p> <pre><code>from pydeflate import wb_exchange\n\n# Example: Multi-country dataset with mixed currencies\ndata = {\n    'country': ['USA', 'GBR', 'JPN', 'FRA', 'CAN'],\n    'year': [2017, 2017, 2017, 2017, 2017],\n    'value_lcu': [100, 100, 100, 100, 100]  # Each in local currency\n}\ndf = pd.DataFrame(data)\n\n# Convert all to EUR\nresult = wb_exchange(\n    data=df,\n    source_currency=\"LCU\",      # USD, GBP, JPY, EUR, CAD respectively\n    target_currency=\"FRA\",      # All to EUR\n    id_column=\"country\",\n    value_column=\"value_lcu\",\n    target_value_column=\"value_eur\"\n)\n\nprint(result[['country', 'value_lcu', 'value_eur']])\n</code></pre>"},{"location":"exchange/#common-currency-codes","title":"Common Currency Codes","text":"<p>pydeflate accepts both ISO3 country codes and currency abbreviations:</p> <pre><code># These are equivalent:\nsource_currency=\"USA\"  \u2194  source_currency=\"USD\"\ntarget_currency=\"GBR\"  \u2194  target_currency=\"GBP\"\ntarget_currency=\"FRA\"  \u2194  target_currency=\"EUR\"  # For Eurozone\ntarget_currency=\"JPN\"  \u2194  target_currency=\"JPY\"\ntarget_currency=\"CAN\"  \u2194  target_currency=\"CAD\"\n</code></pre> <p>For other countries, use the ISO3 country code:</p> <pre><code>source_currency=\"CHE\"  # Swiss Franc (CHF)\ntarget_currency=\"AUS\"  # Australian Dollar (AUD)\n</code></pre>"},{"location":"exchange/#handling-missing-data","title":"Handling Missing Data","text":"<p>If exchange rate data is missing for a country-year combination, pydeflate:</p> <ol> <li>Returns <code>NaN</code> for that row</li> <li>Logs a warning with details</li> </ol> <pre><code>from pydeflate import imf_exchange\nimport pandas as pd\n\ndata = {\n    'country': ['XYZ'],  # Non-existent country\n    'year': [2015],\n    'value': [100]\n}\ndf = pd.DataFrame(data)\n\nresult = imf_exchange(\n    data=df,\n    source_currency=\"XYZ\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    value_column=\"value\",\n    target_value_column=\"value_usd\"\n)\n\n# result['value_usd'] will be NaN\nprint(result)\n# Warning logged: \"Missing exchange rate data for XYZ in 2015\"\n</code></pre> <p>Check for missing data:</p> <pre><code># Count missing conversions\nmissing_count = result['value_usd'].isna().sum()\nprint(f\"Missing conversions: {missing_count}\")\n\n# Filter to valid conversions only\nvalid_data = result.dropna(subset=['value_usd'])\n</code></pre>"},{"location":"exchange/#choosing-an-exchange-source","title":"Choosing an Exchange Source","text":"Use Case Recommended Function General currency conversion <code>imf_exchange</code> or <code>wb_exchange</code> Living standard comparisons <code>wb_exchange_ppp</code> ODA/development finance <code>oecd_dac_exchange</code> Need future estimates <code>imf_exchange</code> Consistency with World Bank data <code>wb_exchange</code> Consistency with DAC reporting <code>oecd_dac_exchange</code>"},{"location":"exchange/#complete-example-multi-source-analysis","title":"Complete Example: Multi-Source Analysis","text":"<p>Compare exchange rates across sources:</p> <pre><code>from pydeflate import imf_exchange, wb_exchange, oecd_dac_exchange, set_pydeflate_path\nimport pandas as pd\n\nset_pydeflate_path(\"./data\")\n\n# Test data: GBP to USD conversion\ndata = {\n    'country': ['GBR', 'GBR', 'GBR'],\n    'year': [2015, 2016, 2017],\n    'amount_gbp': [1000, 1000, 1000]\n}\ndf = pd.DataFrame(data)\n\n# Apply all three sources\nimf_result = imf_exchange(\n    data=df, source_currency=\"GBR\", target_currency=\"USA\",\n    id_column=\"country\", value_column=\"amount_gbp\",\n    target_value_column=\"usd_imf\"\n)\n\nwb_result = wb_exchange(\n    data=df, source_currency=\"GBR\", target_currency=\"USA\",\n    id_column=\"country\", value_column=\"amount_gbp\",\n    target_value_column=\"usd_wb\"\n)\n\ndac_result = oecd_dac_exchange(\n    data=df, source_currency=\"GBR\", target_currency=\"USA\",\n    id_column=\"country\", value_column=\"amount_gbp\",\n    target_value_column=\"usd_dac\"\n)\n\n# Merge results\ncomparison = df.copy()\ncomparison['usd_imf'] = imf_result['usd_imf']\ncomparison['usd_wb'] = wb_result['usd_wb']\ncomparison['usd_dac'] = dac_result['usd_dac']\n\nprint(comparison)\n\n# Analyze differences\ncomparison['imf_wb_diff'] = comparison['usd_imf'] - comparison['usd_wb']\ncomparison['imf_dac_diff'] = comparison['usd_imf'] - comparison['usd_dac']\nprint(comparison[['year', 'imf_wb_diff', 'imf_dac_diff']])\n</code></pre>"},{"location":"exchange/#next-steps","title":"Next Steps","text":"<ul> <li>Deflation Guide - Combine exchange with deflation</li> <li>Data Sources - Detailed source comparison</li> <li>Advanced Topics - Parallel processing and caching</li> </ul>"},{"location":"faq/","title":"FAQ and Troubleshooting","text":"<p>Common questions and solutions for pydeflate users.</p>"},{"location":"faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"faq/#how-do-i-install-pydeflate","title":"How do I install pydeflate?","text":"<pre><code>pip install pydeflate --upgrade\n</code></pre> <p>Requires Python 3.11 or higher.</p>"},{"location":"faq/#do-i-need-to-configure-anything-before-using-pydeflate","title":"Do I need to configure anything before using pydeflate?","text":"<p>Yes, set the cache directory:</p> <pre><code>from pydeflate import set_pydeflate_path\n\nset_pydeflate_path(\"./pydeflate_data\")\n</code></pre> <p>This only needs to be done once per script/session.</p>"},{"location":"faq/#where-should-i-store-the-cache","title":"Where should I store the cache?","text":"<p>Choose a persistent location:</p> <ul> <li>Development: <code>./pydeflate_data</code> (project directory)</li> <li>Production: <code>/var/lib/myapp/pydeflate</code> (system directory)</li> <li>User scripts: <code>~/.pydeflate</code> (home directory)</li> </ul> <p>The cache stores downloaded data from IMF, World Bank, and OECD.</p>"},{"location":"faq/#can-i-use-environment-variables-for-configuration","title":"Can I use environment variables for configuration?","text":"<p>Yes:</p> <pre><code>export PYDEFLATE_DATA_DIR=\"/path/to/cache\"\n</code></pre> <p>Then you don't need to call <code>set_pydeflate_path()</code>.</p>"},{"location":"faq/#data-requirements","title":"Data Requirements","text":""},{"location":"faq/#what-format-should-my-data-be-in","title":"What format should my data be in?","text":"<p>pandas DataFrame with at least:</p> <ol> <li>Country column: ISO3 codes (e.g., <code>USA</code>, <code>GBR</code>, <code>FRA</code>)</li> <li>Year column: Integer, string, or datetime</li> <li>Value column: Numeric (int or float)</li> </ol> <p>Example:</p> <pre><code>data = {\n    'country': ['USA', 'GBR', 'FRA'],\n    'year': [2015, 2016, 2017],\n    'value': [1000, 1100, 1200]\n}\ndf = pd.DataFrame(data)\n</code></pre>"},{"location":"faq/#my-data-uses-country-names-not-iso3-codes-what-should-i-do","title":"My data uses country names, not ISO3 codes. What should I do?","text":"<p>Convert to ISO3 codes first:</p> <pre><code># Option 1: Using country_converter\nimport country_converter as coco\ndf['iso3'] = coco.convert(df['country_name'], to='ISO3')\n\n# Option 2: Using bblocks-places\nfrom bblocks import places\ndf[\"iso3_code\"] = places.resolve_places(df[\"country_name\"], to_type=\"iso3_code\")\n</code></pre> <p>Then use the ISO3 column with pydeflate.</p>"},{"location":"faq/#can-i-use-dac-codes-or-other-country-codes","title":"Can I use DAC codes or other country codes?","text":"<p>Yes, with <code>use_source_codes=True</code>:</p> <pre><code>from pydeflate import oecd_dac_deflate\n\nresult = oecd_dac_deflate(\n    data=df,\n    id_column=\"dac_code\",\n    use_source_codes=True,  # Enable DAC codes\n    ...\n)\n</code></pre> <p>This works when your data uses the same coding system as the source.</p>"},{"location":"faq/#currency-codes","title":"Currency Codes","text":""},{"location":"faq/#what-currency-codes-are-supported","title":"What currency codes are supported?","text":"<p>Use ISO3 country codes or common abbreviations:</p> Code Country Currency <code>USA</code> or <code>USD</code> United States US Dollar <code>FRA</code> or <code>EUR</code> France (Eurozone) Euro <code>GBR</code> or <code>GBP</code> United Kingdom British Pound <code>JPN</code> or <code>JPY</code> Japan Japanese Yen <code>CAN</code> or <code>CAD</code> Canada Canadian Dollar <p>For other currencies, use the ISO3 country code.</p>"},{"location":"faq/#what-does-lcu-mean","title":"What does <code>LCU</code> mean?","text":"<p>LCU stands for \"Local Currency Units\" \u2014 each country's own currency:</p> <pre><code># Convert from local currencies to USD\nresult = imf_gdp_deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"LCU\",  # GBP for UK, EUR for France, etc.\n    target_currency=\"USA\",\n    ...\n)\n</code></pre>"},{"location":"faq/#can-i-convert-eur-to-jpy-directly","title":"Can I convert EUR to JPY directly?","text":"<p>Yes, pydeflate handles cross-rates automatically:</p> <pre><code>result = imf_exchange(\n    data=df,\n    source_currency=\"FRA\",  # EUR\n    target_currency=\"JPN\",  # JPY\n    ...\n)\n</code></pre> <p>The conversion uses: EUR \u2192 USD \u2192 JPY.</p>"},{"location":"faq/#data-sources","title":"Data Sources","text":""},{"location":"faq/#which-source-should-i-use","title":"Which source should I use?","text":"Use Case Recommended Source GDP analysis IMF or World Bank Long time series (20+ years) World Bank (linked deflator) Consumer prices IMF or World Bank CPI Development assistance (ODA) OECD DAC Future estimates IMF PPP comparisons World Bank <p>See Data Sources for detailed comparison.</p>"},{"location":"faq/#do-different-sources-give-different-results","title":"Do different sources give different results?","text":"<p>Yes, slightly. Sources use different methodologies and update schedules:</p> <pre><code># Compare sources\nimf_result = imf_gdp_deflate(df, base_year=2015, ...)\nwb_result = wb_gdp_deflate(df, base_year=2015, ...)\n\n# Typically differ by &lt;1% for most countries/years\n</code></pre> <p>Choose the source that matches your analysis context.</p>"},{"location":"faq/#how-often-is-data-updated","title":"How often is data updated?","text":"Source Update Frequency IMF WEO Biannual (April, October) World Bank Annual (September-October) OECD DAC Biannual (April, December) <p>pydeflate warns if cached data is &gt;50 days old.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#im-getting-nan-values-in-my-results-why","title":"I'm getting NaN values in my results. Why?","text":"<p>Common causes:</p> <ol> <li>Missing deflator/exchange data for that country-year</li> <li>Invalid country codes (not recognized)</li> <li>Year out of range (e.g., before 1960)</li> </ol> <p>Check warnings in logs:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.WARNING)\n\n# Run deflation - warnings show missing data\nresult = imf_gdp_deflate(df, ...)\n</code></pre> <p>Filter to valid data:</p> <pre><code>valid_result = result.dropna(subset=['target_value_column'])\n</code></pre>"},{"location":"faq/#how-do-i-update-cached-data","title":"How do I update cached data?","text":"<p>Set <code>update=True</code>:</p> <pre><code>result = imf_gdp_deflate(\n    data=df,\n    base_year=2015,\n    update=True,  # Download fresh data\n    ...\n)\n</code></pre> <p>Or delete cache manually:</p> <pre><code>rm -rf ./pydeflate_data/*\n</code></pre>"},{"location":"faq/#im-getting-no-such-file-or-directory-errors","title":"I'm getting \"No such file or directory\" errors","text":"<p>You forgot to set the cache directory:</p> <pre><code>from pydeflate import set_pydeflate_path\n\nset_pydeflate_path(\"./pydeflate_data\")  # Must call this first\n\n# Now proceed\nresult = imf_gdp_deflate(df, ...)\n</code></pre>"},{"location":"faq/#downloads-are-failing-what-should-i-do","title":"Downloads are failing. What should I do?","text":"<p>Network issues:</p> <ol> <li>Check internet connection</li> <li>Check firewall/proxy (IMF, World Bank, OECD access)</li> <li>Retry with exponential backoff:</li> </ol> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import NetworkError\nimport time\n\ndef deflate_with_retry(df, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return imf_gdp_deflate(df, base_year=2015, update=True, ...)\n        except NetworkError:\n            if attempt &lt; max_retries - 1:\n                wait = 2 ** attempt\n                print(f\"Retry in {wait}s...\")\n                time.sleep(wait)\n            else:\n                raise\n\nresult = deflate_with_retry(df)\n</code></pre>"},{"location":"faq/#my-results-dont-match-published-figures-why","title":"My results don't match published figures. Why?","text":"<p>Possible reasons:</p> <ol> <li>Different base year: Published figures may use different base year</li> <li>Different source: IMF vs World Bank vs OECD use different data</li> <li>Different deflator type: GDP deflator vs CPI</li> <li>Data revision: Sources periodically revise historical data</li> <li>Rounding differences: Calculation precision</li> </ol>"},{"location":"faq/#can-i-use-pydeflate-offline","title":"Can I use pydeflate offline?","text":"<p>Yes, if you've cached the data:</p> <pre><code># First run with internet (downloads data)\nset_pydeflate_path(\"./cache\")\nresult = imf_gdp_deflate(df, base_year=2015, update=True, ...)\n\n# Subsequent runs work offline\nresult = imf_gdp_deflate(df, base_year=2015, ...)  # Uses cache\n</code></pre>"},{"location":"faq/#can-i-process-data-in-parallel","title":"Can I process data in parallel?","text":"<p>Yes, use thread-safe contexts:</p> <pre><code>from pydeflate.context import pydeflate_session\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef process_dataset(df):\n    with pydeflate_session(data_dir=\"./cache\") as ctx:\n        return imf_gdp_deflate(df, context=ctx, ...)\n\nwith ThreadPoolExecutor(max_workers=4) as executor:\n    results = list(executor.map(process_dataset, datasets))\n</code></pre> <p>File locking prevents cache conflicts.</p>"},{"location":"faq/#advanced-topics","title":"Advanced Topics","text":""},{"location":"faq/#can-i-create-custom-data-sources","title":"Can I create custom data sources?","text":"<p>Yes, using the plugin system:</p> <pre><code>from pydeflate.plugins import register_source\n\n@register_source(\"my_source\")\nclass MySource:\n    def __init__(self, update: bool = False):\n        self.name = \"my_source\"\n        self._idx = [\"pydeflate_year\", \"pydeflate_entity_code\", \"pydeflate_iso3\"]\n        self.data = self._load_data(update)\n\n    def lcu_usd_exchange(self):\n        return self.data[self._idx + [\"pydeflate_EXCHANGE\"]]\n\n    def price_deflator(self, kind=\"NGDP_D\"):\n        return self.data[self._idx + [f\"pydeflate_{kind}\"]]\n\n    def validate(self):\n        # Validation logic\n        pass\n</code></pre> <p>See Plugin System for details.</p>"},{"location":"faq/#how-do-i-handle-errors-robustly","title":"How do I handle errors robustly?","text":"<p>Use specific exception handling:</p> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import (\n    NetworkError,\n    ConfigurationError,\n    MissingDataError\n)\n\ntry:\n    result = imf_gdp_deflate(df, base_year=2015, ...)\nexcept NetworkError:\n    # Retry or use cached data\n    pass\nexcept ConfigurationError:\n    # Fix parameters and fail fast\n    raise\nexcept MissingDataError:\n    # Try alternative source\n    result = wb_gdp_deflate(df, base_year=2015, ...)\n</code></pre> <p>See Error Handling for comprehensive examples.</p>"},{"location":"faq/#can-i-use-different-cache-directories-for-different-projects","title":"Can I use different cache directories for different projects?","text":"<p>Yes, using contexts:</p> <pre><code>from pydeflate.context import pydeflate_session\n\n# Project 1\nwith pydeflate_session(data_dir=\"./project1_cache\") as ctx:\n    result1 = imf_gdp_deflate(df1, context=ctx, ...)\n\n# Project 2\nwith pydeflate_session(data_dir=\"./project2_cache\") as ctx:\n    result2 = wb_cpi_deflate(df2, context=ctx, ...)\n</code></pre> <p>See Context Management.</p>"},{"location":"faq/#migration-from-v1","title":"Migration from v1","text":""},{"location":"faq/#how-do-i-migrate-from-pydeflate-v1x","title":"How do I migrate from pydeflate v1.x?","text":"<p>Replace <code>deflate()</code> with source-specific functions:</p> <p>v1.x: <pre><code>result = deflate(df, deflator_source=\"imf\", deflator_method=\"gdp\", ...)\n</code></pre></p> <p>v2.x: <pre><code>result = imf_gdp_deflate(data=df, ...)\n</code></pre></p> <p>See Migration Guide for complete details.</p>"},{"location":"faq/#will-v1-code-still-work","title":"Will v1 code still work?","text":"<p>Yes, but with deprecation warnings. Update to v2 API for:</p> <ul> <li>Better performance</li> <li>Clearer error messages</li> <li>New features (plugins, contexts, validation)</li> </ul>"},{"location":"faq/#when-will-v1-api-be-removed","title":"When will v1 API be removed?","text":"<p>The <code>deflate()</code> function will be removed in v3.0 (no timeline yet). Migrate now to avoid breaking changes.</p>"},{"location":"faq/#getting-help","title":"Getting Help","text":""},{"location":"faq/#where-can-i-report-bugs","title":"Where can I report bugs?","text":"<p>Open an issue on GitHub: https://github.com/jm-rivera/pydeflate/issues</p> <p>Include:</p> <ul> <li>pydeflate version (<code>pip show pydeflate</code>)</li> <li>Python version</li> <li>Minimal reproducible example</li> <li>Error messages and stack traces</li> </ul>"},{"location":"faq/#where-can-i-ask-questions","title":"Where can I ask questions?","text":"<ol> <li>Check this FAQ</li> <li>Review the documentation</li> <li>Open a GitHub issue for support</li> </ol>"},{"location":"faq/#how-can-i-contribute","title":"How can I contribute?","text":"<p>Contributions welcome!</p> <ul> <li>Report bugs and request features on GitHub</li> <li>Submit pull requests for fixes and enhancements</li> <li>Improve documentation</li> <li>Share use cases and examples</li> </ul> <p>See the GitHub repository for contribution guidelines.</p>"},{"location":"faq/#common-patterns","title":"Common Patterns","text":""},{"location":"faq/#convert-multiple-dataframes","title":"Convert multiple DataFrames","text":"<pre><code>datasets = [df1, df2, df3]\n\nresults = [\n    imf_gdp_deflate(df, base_year=2015, ...)\n    for df in datasets\n]\n</code></pre>"},{"location":"faq/#compare-sources","title":"Compare sources","text":"<pre><code>imf_result = imf_gdp_deflate(df, base_year=2015, ...)\nwb_result = wb_gdp_deflate(df, base_year=2015, ...)\n\ncomparison = df.merge(\n    imf_result[['country', 'year', 'value_imf']],\n    on=['country', 'year']\n).merge(\n    wb_result[['country', 'year', 'value_wb']],\n    on=['country', 'year']\n)\n</code></pre>"},{"location":"faq/#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started - Basic setup and usage</li> <li>Deflation Guide - Comprehensive deflation examples</li> <li>Advanced Topics - Error handling, contexts, plugins</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide walks you through setting up pydeflate and understanding the basic workflow.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install pydeflate via pip:</p> <pre><code>pip install pydeflate --upgrade\n</code></pre>"},{"location":"getting-started/#initial-setup","title":"Initial Setup","text":"<p>Before using pydeflate, specify where deflator and exchange rate data should be cached. This needs to be done once per script or session.</p> <pre><code>from pydeflate import set_pydeflate_path\n\n# Set cache directory\nset_pydeflate_path(\"path/to/data/folder\")\n</code></pre> <p>Cache Location</p> <p>Choose a persistent location for your cache directory. pydeflate will download data from external sources (IMF, World Bank, OECD) and store it here for reuse. This avoids repeated downloads and improves performance.</p>"},{"location":"getting-started/#alternative-environment-variable","title":"Alternative: Environment Variable","text":"<p>You can also set the cache directory using an environment variable:</p> <pre><code>export PYDEFLATE_DATA_DIR=\"/path/to/data/folder\"\n</code></pre> <p>Then you don't need to call <code>set_pydeflate_path()</code> in your code.</p>"},{"location":"getting-started/#dataframe-requirements","title":"DataFrame Requirements","text":"<p>pydeflate works with pandas DataFrames. Your DataFrame must contain at least three columns:</p>"},{"location":"getting-started/#1-id-column-country-identifier","title":"1. ID Column (Country Identifier)","text":"<p>By default, pydeflate expects ISO3 country codes (e.g., <code>USA</code>, <code>FRA</code>, <code>GBR</code>).</p> <pre><code>import pandas as pd\n\ndata = {\n    'country': ['USA', 'FRA', 'JPN'],  # ISO3 codes\n    'year': [2015, 2016, 2017],\n    'amount': [100, 200, 300]\n}\ndf = pd.DataFrame(data)\n</code></pre> <p>Converting to ISO3 Codes</p> <p>If your data uses different country identifiers (names, ISO2 codes, etc.), convert them to ISO3 before using pydeflate. Recommended libraries:</p> <ul> <li><code>bblocks-place</code></li> <li><code>hdx-python-country</code></li> </ul>"},{"location":"getting-started/#using-source-specific-codes","title":"Using Source-Specific Codes","text":"<p>If your data uses codes from the same source you're querying (e.g., DAC codes, IMF entity codes), set <code>use_source_codes=True</code>:</p> <pre><code># Data with DAC codes\ndata = {\n    'dac_code': [4, 302, 12],\n    'year': [2015, 2016, 2017],\n    'amount': [100, 200, 300]\n}\ndf = pd.DataFrame(data)\n\n# Use DAC codes directly\nresult = oecd_dac_deflate(\n    data=df,\n    base_year=2015,\n    id_column=\"dac_code\",\n    use_source_codes=True,  # Enable source codes\n    ...\n)\n</code></pre>"},{"location":"getting-started/#2-year-column","title":"2. Year Column","text":"<p>Can be a string, integer, or datetime. By default, pydeflate looks for a column named <code>year</code>.</p> <pre><code># All these formats work:\ndf['year'] = [2015, 2016, 2017]                    # Integer\ndf['year'] = ['2015', '2016', '2017']              # String\ndf['year'] = pd.to_datetime(['2015', '2016', '2017'])  # Datetime\n</code></pre> <p>If your year column has a different name, specify it:</p> <pre><code>result = imf_gdp_deflate(\n    data=df,\n    year_column=\"fiscal_year\",  # Custom column name\n    ...\n)\n</code></pre>"},{"location":"getting-started/#custom-year-formats","title":"Custom Year Formats","text":"<p>For non-standard formats, provide a <code>year_format</code> string:</p> <pre><code># Financial year format: \"FY2015\"\nresult = imf_gdp_deflate(\n    data=df,\n    year_column=\"fiscal_year\",\n    year_format=\"FY%Y\",\n    ...\n)\n</code></pre>"},{"location":"getting-started/#3-value-column","title":"3. Value Column","text":"<p>The numeric column to convert. By default, pydeflate looks for a column named <code>value</code>.</p> <pre><code>data = {\n    'country': ['USA', 'FRA'],\n    'year': [2015, 2016],\n    'value': [100.5, 200.75]  # Must be numeric (int or float)\n}\n</code></pre> <p>Specify a different column name if needed:</p> <pre><code>result = imf_gdp_deflate(\n    data=df,\n    value_column=\"gdp_usd\",  # Custom column name\n    ...\n)\n</code></pre>"},{"location":"getting-started/#basic-workflow","title":"Basic Workflow","text":""},{"location":"getting-started/#step-1-import-and-setup","title":"Step 1: Import and Setup","text":"<pre><code>from pydeflate import imf_gdp_deflate, set_pydeflate_path\nimport pandas as pd\n\n# Set cache directory\nset_pydeflate_path(\"./pydeflate_data\")\n</code></pre>"},{"location":"getting-started/#step-2-prepare-your-data","title":"Step 2: Prepare Your Data","text":"<pre><code># Create or load your DataFrame\ndata = {\n    'iso_code': ['USA', 'GBR', 'JPN'],\n    'year': [2017, 2018, 2019],\n    'value': [1000, 2000, 3000]\n}\ndf = pd.DataFrame(data)\n</code></pre>"},{"location":"getting-started/#step-3-convert-prices","title":"Step 3: Convert Prices","text":"<pre><code># Convert from current USD to constant 2015 EUR\nresult = imf_gdp_deflate(\n    data=df,\n    base_year=2015,                     # Year for constant prices\n    source_currency=\"USA\",              # Current currency (USD)\n    target_currency=\"FRA\",              # Target currency (EUR)\n    id_column=\"iso_code\",               # Country identifier column\n    year_column=\"year\",                 # Year column\n    value_column=\"value\",               # Value column to convert\n    target_value_column=\"value_2015\"    # New column for results\n)\n\nprint(result)\n</code></pre> <p>The result includes your original columns plus the new <code>value_2015</code> column with converted values.</p>"},{"location":"getting-started/#common-parameters","title":"Common Parameters","text":"<p>All deflation and exchange functions share these parameters:</p> Parameter Required Default Description <code>data</code> Yes - pandas DataFrame to convert <code>id_column</code> Yes - Column with country identifiers (ISO3 by default) <code>year_column</code> No <code>\"year\"</code> Column with year values <code>value_column</code> No <code>\"value\"</code> Column with values to convert <code>target_value_column</code> No Same as <code>value_column</code> Column name for results <code>source_currency</code> Yes* - Source currency (ISO3 country code or <code>\"LCU\"</code>) <code>target_currency</code> Yes* - Target currency (ISO3 country code or <code>\"LCU\"</code>) <code>base_year</code> Yes** - Base year for constant prices <code>use_source_codes</code> No <code>False</code> Use source-specific country codes <code>update</code> No <code>False</code> Force update of cached data <p>* Required for exchange and deflation functions ** Required for deflation functions</p>"},{"location":"getting-started/#currency-codes","title":"Currency Codes","text":"<p>pydeflate accepts both country codes and common currency abbreviations:</p> <pre><code># These are equivalent:\nsource_currency=\"USA\"  # ISO3 country code\nsource_currency=\"USD\"  # Currency abbreviation\n\ntarget_currency=\"FRA\"  # For Eurozone countries\ntarget_currency=\"EUR\"  # Convenience mapping\n\n# Other supported abbreviations:\n\"GBP\" \u2192 \"GBR\"  # British Pound\n\"JPY\" \u2192 \"JPN\"  # Japanese Yen\n\"CAD\" \u2192 \"CAN\"  # Canadian Dollar\n</code></pre>"},{"location":"getting-started/#local-currency-units-lcu","title":"Local Currency Units (LCU)","text":"<p>Use <code>\"LCU\"</code> to work with each country's local currency:</p> <pre><code># Convert from local currencies to USD\nimf_gdp_deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"LCU\",  # Each country's local currency\n    target_currency=\"USA\",\n    ...\n)\n</code></pre>"},{"location":"getting-started/#data-updates","title":"Data Updates","text":"<p>pydeflate caches downloaded data locally. If cached data is older than 50 days, you'll see a warning:</p> <pre><code>Warning: Cached data is 65 days old. Consider updating with update=True\n</code></pre> <p>To force an update:</p> <pre><code>result = imf_gdp_deflate(\n    data=df,\n    base_year=2015,\n    update=True,  # Download fresh data\n    ...\n)\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics, explore specific use cases:</p> <ul> <li>Deflation Guide - Detailed examples for all deflation methods</li> <li>Currency Exchange - Currency conversion without deflation</li> <li>Data Sources - Choosing between IMF, World Bank, and OECD DAC</li> </ul>"},{"location":"getting-started/#quick-reference","title":"Quick Reference","text":"<pre><code># Deflation functions\nfrom pydeflate import (\n    imf_gdp_deflate,      # IMF GDP deflator\n    imf_cpi_deflate,      # IMF CPI (period average)\n    imf_cpi_e_deflate,    # IMF CPI (end-of-period)\n    wb_gdp_deflate,       # World Bank GDP deflator\n    wb_gdp_linked_deflate,# World Bank linked GDP deflator\n    wb_cpi_deflate,       # World Bank CPI\n    oecd_dac_deflate,     # OECD DAC deflator\n)\n\n# Exchange functions\nfrom pydeflate import (\n    imf_exchange,         # IMF exchange rates\n    wb_exchange,          # World Bank exchange rates\n    wb_exchange_ppp,      # World Bank PPP exchange rates\n    oecd_dac_exchange,    # OECD DAC exchange rates\n)\n\n# Configuration\nfrom pydeflate import set_pydeflate_path\n</code></pre>"},{"location":"migration/","title":"Migration Guide: v1 to v2","text":"<p>pydeflate v2.0 introduces significant API changes for improved clarity and simplicity. This guide helps you migrate from v1.x to v2.x.</p>"},{"location":"migration/#overview-of-changes","title":"Overview of Changes","text":""},{"location":"migration/#whats-new-in-v2","title":"What's New in v2","text":"<ul> <li>Source-specific functions: <code>imf_gdp_deflate()</code>, <code>wb_cpi_deflate()</code>, etc. instead of generic <code>deflate()</code></li> <li>Simplified parameters: Clearer naming and fewer required parameters</li> <li>Better error handling: Specific exception types for different failures</li> <li>Source-specific codes: Support for DAC codes, IMF entity codes, etc.</li> <li>Performance improvements: Faster data loading and caching</li> </ul>"},{"location":"migration/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>The generic <code>deflate()</code> function is deprecated</li> <li>Country code conversion is no longer automatic (use ISO3 codes)</li> <li>Some parameter names have changed</li> <li>Python 3.11+ required (was 3.10+)</li> </ul>"},{"location":"migration/#quick-migration","title":"Quick Migration","text":""},{"location":"migration/#before-v1x","title":"Before (v1.x)","text":"<pre><code>from pydeflate import deflate, set_pydeflate_path\n\nset_pydeflate_path(\"./data\")\n\nresult = deflate(\n    df=df,\n    base_year=2015,\n    deflator_source=\"imf\",\n    deflator_method=\"gdp\",\n    exchange_source=\"imf\",\n    source_currency=\"USA\",\n    target_currency=\"FRA\",\n    id_column=\"country\",\n    id_type=\"ISO3\",  # Automatic conversion\n    value_col=\"value\",\n    target_col=\"value_constant\"\n)\n</code></pre>"},{"location":"migration/#after-v2x","title":"After (v2.x)","text":"<pre><code>from pydeflate import imf_gdp_deflate, set_pydeflate_path\n\nset_pydeflate_path(\"./data\")\n\nresult = imf_gdp_deflate(\n    data=df,  # Renamed from 'df'\n    base_year=2015,\n    source_currency=\"USA\",\n    target_currency=\"FRA\",\n    id_column=\"country\",  # Must be ISO3 (no auto-conversion)\n    value_column=\"value\",  # Renamed from 'value_col'\n    target_value_column=\"value_constant\"  # Renamed from 'target_col'\n)\n</code></pre>"},{"location":"migration/#parameter-mapping","title":"Parameter Mapping","text":""},{"location":"migration/#core-parameters","title":"Core Parameters","text":"v1.x v2.x Notes <code>df</code> <code>data</code> More descriptive name <code>value_col</code> <code>value_column</code> Consistent naming <code>target_col</code> <code>target_value_column</code> Clearer purpose <code>id_type</code> removed Use ISO3 codes directly <code>deflator_source</code> function name <code>imf_gdp_deflate</code> vs <code>wb_gdp_deflate</code> <code>deflator_method</code> function name <code>imf_cpi_deflate</code> vs <code>imf_gdp_deflate</code> <code>exchange_source</code> function name Matched to deflator source"},{"location":"migration/#source-and-method-selection","title":"Source and Method Selection","text":"<p>v1.x approach (single function with parameters):</p> <pre><code># IMF GDP\ndeflate(df, deflator_source=\"imf\", deflator_method=\"gdp\", ...)\n\n# World Bank CPI\ndeflate(df, deflator_source=\"wb\", deflator_method=\"cpi\", ...)\n\n# OECD DAC\ndeflate(df, deflator_source=\"dac\", deflator_method=\"dac\", ...)\n</code></pre> <p>v2.x approach (dedicated functions):</p> <pre><code># IMF GDP\nimf_gdp_deflate(data=df, ...)\n\n# World Bank CPI\nwb_cpi_deflate(data=df, ...)\n\n# OECD DAC\noecd_dac_deflate(data=df, ...)\n</code></pre>"},{"location":"migration/#function-mapping","title":"Function Mapping","text":""},{"location":"migration/#deflation-functions","title":"Deflation Functions","text":"v1.x v2.x <code>deflate(df, deflator_source=\"imf\", deflator_method=\"gdp\")</code> <code>imf_gdp_deflate(data=df)</code> <code>deflate(df, deflator_source=\"imf\", deflator_method=\"cpi\")</code> <code>imf_cpi_deflate(data=df)</code> <code>deflate(df, deflator_source=\"imf\", deflator_method=\"cpi_e\")</code> <code>imf_cpi_e_deflate(data=df)</code> <code>deflate(df, deflator_source=\"wb\", deflator_method=\"gdp\")</code> <code>wb_gdp_deflate(data=df)</code> <code>deflate(df, deflator_source=\"wb\", deflator_method=\"gdp_linked\")</code> <code>wb_gdp_linked_deflate(data=df)</code> <code>deflate(df, deflator_source=\"wb\", deflator_method=\"cpi\")</code> <code>wb_cpi_deflate(data=df)</code> <code>deflate(df, deflator_source=\"dac\", deflator_method=\"dac\")</code> <code>oecd_dac_deflate(data=df)</code>"},{"location":"migration/#exchange-functions","title":"Exchange Functions","text":"<p>v2.x adds dedicated exchange functions:</p> <pre><code># v2.x only (no v1.x equivalent)\nfrom pydeflate import (\n    imf_exchange,\n    wb_exchange,\n    wb_exchange_ppp,\n    oecd_dac_exchange\n)\n</code></pre>"},{"location":"migration/#country-code-handling","title":"Country Code Handling","text":""},{"location":"migration/#v1x-automatic-conversion","title":"v1.x: Automatic Conversion","text":"<p>v1.x automatically converted country names/codes:</p> <pre><code># v1.x - automatic conversion\ndf['country'] = ['United States', 'United Kingdom', 'France']\n\nresult = deflate(\n    df=df,\n    id_column=\"country\",\n    id_type=\"name\",  # Auto-convert from names\n    ...\n)\n</code></pre>"},{"location":"migration/#v2x-explicit-iso3-codes","title":"v2.x: Explicit ISO3 Codes","text":"<p>v2.x requires ISO3 codes (prevents conversion errors):</p> <pre><code># v2.x - use ISO3 codes\ndf['country'] = ['USA', 'GBR', 'FRA']\n\nresult = imf_gdp_deflate(\n    data=df,\n    id_column=\"country\",  # Must be ISO3\n    ...\n)\n</code></pre> <p>Migration tip: Convert to ISO3 before calling pydeflate:</p> <pre><code># Using country-converter\nimport country_converter as coco\n\ndf['iso3'] = coco.convert(df['country'], to='ISO3')\n\nresult = imf_gdp_deflate(data=df, id_column=\"iso3\", ...)\n</code></pre> <p>Or use <code>bblocks</code>:</p> <pre><code># Using bblocks\nfrom bblocks import add_iso_codes_column\n\ndf = add_iso_codes_column(df, id_column=\"country\")\n\nresult = imf_gdp_deflate(data=df, id_column=\"ISO3\", ...)\n</code></pre>"},{"location":"migration/#complete-migration-examples","title":"Complete Migration Examples","text":""},{"location":"migration/#example-1-gdp-deflation","title":"Example 1: GDP Deflation","text":"<p>v1.x:</p> <pre><code>from pydeflate import deflate, set_pydeflate_path\n\nset_pydeflate_path(\"./data\")\n\nresult = deflate(\n    df=df,\n    base_year=2015,\n    deflator_source=\"imf\",\n    deflator_method=\"gdp\",\n    exchange_source=\"imf\",\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    id_type=\"ISO3\",\n    value_col=\"gdp\",\n    target_col=\"gdp_2015\"\n)\n</code></pre> <p>v2.x:</p> <pre><code>from pydeflate import imf_gdp_deflate, set_pydeflate_path\n\nset_pydeflate_path(\"./data\")\n\nresult = imf_gdp_deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    value_column=\"gdp\",\n    target_value_column=\"gdp_2015\"\n)\n</code></pre>"},{"location":"migration/#example-2-cpi-with-currency-conversion","title":"Example 2: CPI with Currency Conversion","text":"<p>v1.x:</p> <pre><code>result = deflate(\n    df=df,\n    base_year=2020,\n    deflator_source=\"wb\",\n    deflator_method=\"cpi\",\n    exchange_source=\"wb\",\n    source_currency=\"GBR\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    id_type=\"ISO3\",\n    value_col=\"expenditure\",\n    target_col=\"expenditure_usd_2020\"\n)\n</code></pre> <p>v2.x:</p> <pre><code>from pydeflate import wb_cpi_deflate\n\nresult = wb_cpi_deflate(\n    data=df,\n    base_year=2020,\n    source_currency=\"GBR\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    value_column=\"expenditure\",\n    target_value_column=\"expenditure_usd_2020\"\n)\n</code></pre>"},{"location":"migration/#example-3-dac-deflation","title":"Example 3: DAC Deflation","text":"<p>v1.x:</p> <pre><code># With country names\nresult = deflate(\n    df=df,\n    base_year=2018,\n    deflator_source=\"dac\",\n    deflator_method=\"dac\",\n    exchange_source=\"dac\",\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    id_column=\"donor\",\n    id_type=\"name\",\n    value_col=\"oda\",\n    target_col=\"oda_2018\"\n)\n</code></pre> <p>v2.x:</p> <pre><code>from pydeflate import oecd_dac_deflate\n\n# Option 1: Convert to ISO3 first\ndf['iso3'] = convert_to_iso3(df['donor'])\n\nresult = oecd_dac_deflate(\n    data=df,\n    base_year=2018,\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    id_column=\"iso3\",\n    value_column=\"oda\",\n    target_value_column=\"oda_2018\"\n)\n\n# Option 2: Use DAC codes directly\nresult = oecd_dac_deflate(\n    data=df,\n    base_year=2018,\n    source_currency=\"USA\",\n    target_currency=\"USA\",\n    id_column=\"dac_code\",\n    use_source_codes=True,  # New in v2!\n    value_column=\"oda\",\n    target_value_column=\"oda_2018\"\n)\n</code></pre>"},{"location":"migration/#new-features-in-v2","title":"New Features in v2","text":""},{"location":"migration/#source-specific-codes","title":"Source-Specific Codes","text":"<p>v2.x supports source-specific country codes:</p> <pre><code>from pydeflate import oecd_dac_deflate\n\n# Use DAC codes instead of ISO3\nresult = oecd_dac_deflate(\n    data=df,\n    base_year=2018,\n    id_column=\"dac_code\",\n    use_source_codes=True,  # Enable DAC codes\n    ...\n)\n</code></pre>"},{"location":"migration/#currency-exchange-only","title":"Currency Exchange Only","text":"<p>v2.x adds dedicated exchange functions:</p> <pre><code>from pydeflate import imf_exchange\n\n# Convert currency without deflation\nresult = imf_exchange(\n    data=df,\n    source_currency=\"GBR\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    value_column=\"amount_gbp\",\n    target_value_column=\"amount_usd\"\n)\n</code></pre>"},{"location":"migration/#better-error-handling","title":"Better Error Handling","text":"<p>v2.x provides specific exceptions:</p> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import (\n    NetworkError,\n    ConfigurationError,\n    MissingDataError\n)\n\ntry:\n    result = imf_gdp_deflate(df, ...)\nexcept NetworkError:\n    # Handle network failures\n    pass\nexcept ConfigurationError:\n    # Handle invalid parameters\n    pass\nexcept MissingDataError:\n    # Handle missing data\n    pass\n</code></pre>"},{"location":"migration/#deprecation-timeline","title":"Deprecation Timeline","text":"Version Status Notes v1.x Deprecated Old <code>deflate()</code> function still works but warns v2.0-2.1 Current <code>deflate()</code> function available but deprecated v3.0 Future <code>deflate()</code> function will be removed"},{"location":"migration/#using-deprecated-function","title":"Using Deprecated Function","text":"<p>The old <code>deflate()</code> function still works in v2.x but shows deprecation warnings:</p> <pre><code>from pydeflate import deflate  # DeprecationWarning\n\nresult = deflate(df, ...)  # Works but warns\n</code></pre> <p>Suppress warnings (not recommended):</p> <pre><code>import warnings\n\nwith warnings.catch_warnings():\n    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n    result = deflate(df, ...)\n</code></pre>"},{"location":"migration/#migration-checklist","title":"Migration Checklist","text":"<ul> <li>[ ] Update to pydeflate v2.x: <code>pip install pydeflate --upgrade</code></li> <li>[ ] Replace <code>deflate()</code> with source-specific functions</li> <li>[ ] Update parameter names: <code>df</code> \u2192 <code>data</code>, <code>value_col</code> \u2192 <code>value_column</code></li> <li>[ ] Convert country identifiers to ISO3 codes</li> <li>[ ] Remove <code>id_type</code> parameter</li> <li>[ ] Test with small dataset to verify results match</li> <li>[ ] Update error handling to use specific exception types</li> <li>[ ] Review deprecation warnings in logs</li> <li>[ ] Update documentation and code comments</li> </ul>"},{"location":"migration/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during migration:</p> <ol> <li>Check the FAQ for common problems</li> <li>Review examples in the documentation</li> <li>Open an issue on GitHub</li> </ol>"},{"location":"migration/#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started - Learn v2.x basics</li> <li>Deflation Guide - Explore all deflation functions</li> <li>Advanced Features - Error handling, contexts, plugins</li> </ul>"},{"location":"advanced/context/","title":"Context Management","text":"<p>pydeflate v2.2+ introduces a context management system that eliminates global state and enables advanced use cases like parallel processing, custom cache directories, and dependency injection.</p>"},{"location":"advanced/context/#why-use-contexts","title":"Why Use Contexts?","text":"<p>The traditional approach uses global configuration:</p> <pre><code>from pydeflate import set_pydeflate_path, imf_gdp_deflate\n\n# Global state - affects all subsequent operations\nset_pydeflate_path(\"./data\")\n\nresult = imf_gdp_deflate(df, base_year=2015, ...)\n</code></pre> <p>Limitations:</p> <ul> <li>Can't use different cache directories in the same script</li> <li>Difficult to manage logging verbosity per operation</li> </ul> <p>Context management solves these issues:</p> <pre><code>from pydeflate.context import pydeflate_session\n\n# Isolated configuration\nwith pydeflate_session(data_dir=\"./cache1\") as ctx:\n    result1 = imf_gdp_deflate(df, base_year=2015, context=ctx, ...)\n\nwith pydeflate_session(data_dir=\"./cache2\") as ctx:\n    result2 = wb_gdp_deflate(df, base_year=2020, context=ctx, ...)\n</code></pre>"},{"location":"advanced/context/#basic-usage","title":"Basic Usage","text":""},{"location":"advanced/context/#session-context","title":"Session Context","text":"<p>Use <code>pydeflate_session()</code> for scoped configuration:</p> <pre><code>from pydeflate.context import pydeflate_session\nfrom pydeflate import imf_gdp_deflate\nimport pandas as pd\n\ndata = {\n    'country': ['USA', 'GBR'],\n    'year': [2015, 2016],\n    'value': [1000, 1100]\n}\ndf = pd.DataFrame(data)\n\n# Use custom cache directory\nwith pydeflate_session(data_dir=\"./my_cache\") as ctx:\n    result = imf_gdp_deflate(\n        data=df,\n        base_year=2015,\n        source_currency=\"USA\",\n        target_currency=\"USA\",\n        id_column=\"country\",\n        value_column=\"value\",\n        target_value_column=\"value_constant\",\n        context=ctx  # Pass context\n    )\n\nprint(result)\n# Data cached in ./my_cache\n</code></pre>"},{"location":"advanced/context/#temporary-context","title":"Temporary Context","text":"<p>For testing or one-off operations:</p> <pre><code>from pydeflate.context import temporary_context\nfrom pydeflate import wb_cpi_deflate\n\n# Creates temporary directory, auto-cleaned on exit\nwith temporary_context() as ctx:\n    result = wb_cpi_deflate(\n        data=df,\n        base_year=2020,\n        context=ctx,\n        ...\n    )\n    # Process result\n\n# Temporary directory automatically deleted\n</code></pre>"},{"location":"advanced/context/#configuration-options","title":"Configuration Options","text":""},{"location":"advanced/context/#data-directory","title":"Data Directory","text":"<p>Specify where deflator/exchange data is cached:</p> <pre><code>with pydeflate_session(data_dir=\"/app/data/pydeflate\") as ctx:\n    result = imf_gdp_deflate(df, context=ctx, ...)\n</code></pre>"},{"location":"advanced/context/#logging-level","title":"Logging Level","text":"<p>Control verbosity:</p> <pre><code>import logging\n\nwith pydeflate_session(log_level=logging.DEBUG) as ctx:\n    # Detailed debug logs\n    result = imf_gdp_deflate(df, context=ctx, ...)\n\nwith pydeflate_session(log_level=logging.WARNING) as ctx:\n    # Only warnings and errors\n    result = wb_gdp_deflate(df, context=ctx, ...)\n</code></pre>"},{"location":"advanced/context/#schema-validation","title":"Schema Validation","text":"<p>Enable data quality checks:</p> <pre><code>with pydeflate_session(enable_validation=True) as ctx:\n    # Schema validation enabled\n    result = imf_gdp_deflate(df, context=ctx, ...)\n</code></pre> <p>See Schema Validation for details.</p>"},{"location":"advanced/context/#combined-configuration","title":"Combined Configuration","text":"<pre><code>import logging\n\nwith pydeflate_session(\n    data_dir=\"./cache\",\n    log_level=logging.INFO,\n    enable_validation=True\n) as ctx:\n    result = imf_gdp_deflate(df, context=ctx, ...)\n</code></pre>"},{"location":"advanced/context/#default-context","title":"Default Context","text":"<p>Set a default context for your entire application:</p> <pre><code>from pydeflate.context import PydeflateContext, set_default_context\nfrom pydeflate import imf_gdp_deflate\nimport logging\n\n# Create and configure context\nctx = PydeflateContext.create(\n    data_dir=\"/app/cache\",\n    log_level=logging.INFO,\n    enable_validation=False\n)\n\n# Set as default\nset_default_context(ctx)\n\n# All subsequent operations use this context automatically\nresult1 = imf_gdp_deflate(df1, base_year=2015, ...)\nresult2 = wb_gdp_deflate(df2, base_year=2020, ...)\nresult3 = oecd_dac_deflate(df3, base_year=2018, ...)\n</code></pre>"},{"location":"advanced/context/#retrieving-default-context","title":"Retrieving Default Context","text":"<pre><code>from pydeflate.context import get_default_context\n\nctx = get_default_context()\nprint(f\"Cache directory: {ctx.data_dir}\")\nprint(f\"Logging level: {ctx.log_level}\")\n</code></pre>"},{"location":"advanced/context/#parallel-processing","title":"Parallel Processing","text":"<p>Contexts are thread-safe, enabling parallel operations:</p> <pre><code>from pydeflate.context import pydeflate_session\nfrom pydeflate import imf_gdp_deflate, wb_gdp_deflate\nfrom concurrent.futures import ThreadPoolExecutor\nimport pandas as pd\n\n# Multiple datasets to process\ndatasets = [df1, df2, df3, df4]\n\ndef process_dataset(df, index):\n    \"\"\"Process dataset with isolated context.\"\"\"\n    with pydeflate_session(data_dir=f\"./cache_{index}\") as ctx:\n        return imf_gdp_deflate(\n            data=df,\n            base_year=2015,\n            source_currency=\"USA\",\n            target_currency=\"USA\",\n            context=ctx,\n            ...\n        )\n\n# Process in parallel\nwith ThreadPoolExecutor(max_workers=4) as executor:\n    futures = [\n        executor.submit(process_dataset, df, i)\n        for i, df in enumerate(datasets)\n    ]\n\n    results = [f.result() for f in futures]\n\nprint(f\"Processed {len(results)} datasets in parallel\")\n</code></pre>"},{"location":"advanced/context/#shared-cache-for-parallel-operations","title":"Shared Cache for Parallel Operations","text":"<p>To use a shared cache (with file locking):</p> <pre><code>from pydeflate.context import pydeflate_session\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef process_with_shared_cache(df, base_year):\n    \"\"\"Multiple threads can safely share same cache.\"\"\"\n    with pydeflate_session(data_dir=\"./shared_cache\") as ctx:\n        return imf_gdp_deflate(\n            data=df,\n            base_year=base_year,\n            context=ctx,\n            ...\n        )\n\nwith ThreadPoolExecutor(max_workers=4) as executor:\n    # All threads share ./shared_cache (file locking prevents conflicts)\n    futures = [\n        executor.submit(process_with_shared_cache, df, year)\n        for df, year in zip(datasets, base_years)\n    ]\n\n    results = [f.result() for f in futures]\n</code></pre> <p>File Locking</p> <p>pydeflate uses <code>filelock</code> for thread-safe cache operations. Multiple threads can safely read/write the same cache directory.</p>"},{"location":"advanced/context/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<p>Use contexts to manage different environments:</p> <pre><code>from pydeflate.context import PydeflateContext, set_default_context\nimport os\nimport logging\n\n# Load environment\nenvironment = os.getenv(\"ENVIRONMENT\", \"development\")\n\nif environment == \"production\":\n    ctx = PydeflateContext.create(\n        data_dir=\"/var/lib/pydeflate\",\n        log_level=logging.WARNING,\n        enable_validation=True  # Strict validation in prod\n    )\nelif environment == \"development\":\n    ctx = PydeflateContext.create(\n        data_dir=\"./dev_cache\",\n        log_level=logging.DEBUG,  # Verbose logs in dev\n        enable_validation=False\n    )\nelif environment == \"testing\":\n    ctx = PydeflateContext.create(\n        data_dir=\"/tmp/pydeflate_test\",\n        log_level=logging.ERROR,\n        enable_validation=True\n    )\n\nset_default_context(ctx)\n</code></pre>"},{"location":"advanced/context/#testing-with-contexts","title":"Testing with Contexts","text":"<p>Contexts make testing cleaner:</p> <pre><code>import pytest\nfrom pydeflate.context import temporary_context\nfrom pydeflate import imf_gdp_deflate\nimport pandas as pd\n\ndef test_deflation():\n    \"\"\"Test deflation without global state contamination.\"\"\"\n\n    # Arrange\n    data = {\n        'country': ['USA'],\n        'year': [2015],\n        'value': [1000]\n    }\n    df = pd.DataFrame(data)\n\n    # Act\n    with temporary_context() as ctx:\n        result = imf_gdp_deflate(\n            data=df,\n            base_year=2015,\n            source_currency=\"USA\",\n            target_currency=\"USA\",\n            id_column=\"country\",\n            value_column=\"value\",\n            target_value_column=\"value_constant\",\n            context=ctx\n        )\n\n    # Assert\n    assert 'value_constant' in result.columns\n    assert result['value_constant'].iloc[0] == 1000  # Base year, no change\n\n    # Temporary cache automatically cleaned up\n</code></pre>"},{"location":"advanced/context/#migration-from-global-state","title":"Migration from Global State","text":""},{"location":"advanced/context/#before-v21-and-earlier","title":"Before (v2.1 and earlier)","text":"<pre><code>from pydeflate import set_pydeflate_path, imf_gdp_deflate\n\n# Global configuration\nset_pydeflate_path(\"./data\")\n\n# All operations use global state\nresult1 = imf_gdp_deflate(df1, ...)\nresult2 = wb_gdp_deflate(df2, ...)\n</code></pre>"},{"location":"advanced/context/#after-v22","title":"After (v2.2+)","text":"<pre><code>from pydeflate.context import PydeflateContext, set_default_context\nfrom pydeflate import imf_gdp_deflate, wb_gdp_deflate\n\n# Option 1: Set default context (backward compatible)\nctx = PydeflateContext.create(data_dir=\"./data\")\nset_default_context(ctx)\n\nresult1 = imf_gdp_deflate(df1, ...)  # Uses default context\nresult2 = wb_gdp_deflate(df2, ...)   # Uses default context\n\n# Option 2: Explicit context (recommended for new code)\nwith pydeflate_session(data_dir=\"./data\") as ctx:\n    result1 = imf_gdp_deflate(df1, context=ctx, ...)\n    result2 = wb_gdp_deflate(df2, context=ctx, ...)\n</code></pre> <p>Backward Compatibility</p> <p><code>set_pydeflate_path()</code> still works and internally creates a default context. Existing code doesn't need to change.</p>"},{"location":"advanced/context/#complete-example","title":"Complete Example","text":"<p>Production application with context management:</p> <pre><code>from pydeflate.context import PydeflateContext, set_default_context\nfrom pydeflate import imf_gdp_deflate, wb_cpi_deflate\nfrom pydeflate.exceptions import PydeflateError\nimport pandas as pd\nimport logging\nimport os\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n# Set up context based on environment\nenv = os.getenv(\"APP_ENV\", \"development\")\n\nif env == \"production\":\n    context = PydeflateContext.create(\n        data_dir=\"/var/lib/myapp/pydeflate\",\n        log_level=logging.WARNING,\n        enable_validation=True\n    )\nelif env == \"testing\":\n    context = PydeflateContext.create(\n        data_dir=\"/tmp/pydeflate_test\",\n        log_level=logging.ERROR,\n        enable_validation=True\n    )\nelse:  # development\n    context = PydeflateContext.create(\n        data_dir=\"./dev_cache\",\n        log_level=logging.DEBUG,\n        enable_validation=False\n    )\n\nset_default_context(context)\n\n# Application code\ndef process_economic_data(gdp_df, cpi_df):\n    \"\"\"Process economic indicators.\"\"\"\n    try:\n        # GDP deflation\n        gdp_result = imf_gdp_deflate(\n            data=gdp_df,\n            base_year=2015,\n            source_currency=\"LCU\",\n            target_currency=\"USA\",\n            id_column=\"country\",\n            value_column=\"gdp\",\n            target_value_column=\"gdp_usd_2015\"\n        )\n\n        # CPI deflation\n        cpi_result = wb_cpi_deflate(\n            data=cpi_df,\n            base_year=2015,\n            source_currency=\"LCU\",\n            target_currency=\"LCU\",\n            id_column=\"country\",\n            value_column=\"price\",\n            target_value_column=\"price_2015\"\n        )\n\n        return gdp_result, cpi_result\n\n    except PydeflateError as e:\n        logging.error(f\"Deflation failed: {e}\")\n        raise\n\n# Run application\nif __name__ == \"__main__\":\n    # Load data\n    gdp_df = pd.read_csv(\"gdp_data.csv\")\n    cpi_df = pd.read_csv(\"cpi_data.csv\")\n\n    # Process\n    gdp_result, cpi_result = process_economic_data(gdp_df, cpi_df)\n\n    # Save results\n    gdp_result.to_csv(\"gdp_constant.csv\", index=False)\n    cpi_result.to_csv(\"cpi_constant.csv\", index=False)\n\n    print(f\"Processed {len(gdp_result)} GDP observations\")\n    print(f\"Processed {len(cpi_result)} CPI observations\")\n</code></pre>"},{"location":"advanced/context/#next-steps","title":"Next Steps","text":"<ul> <li>Error Handling - Robust error handling with contexts</li> <li>Schema Validation - Enable validation in context</li> <li>Plugin System - Use custom sources with contexts</li> </ul>"},{"location":"advanced/exceptions/","title":"Error Handling","text":"<p>pydeflate v2.2,0+ provides a comprehensive exception hierarchy for fine-grained error handling. This guide shows how to handle different error scenarios gracefully.</p>"},{"location":"advanced/exceptions/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>PydeflateError (base)\n\u251c\u2500\u2500 DataSourceError\n\u2502   \u2514\u2500\u2500 NetworkError\n\u251c\u2500\u2500 SchemaValidationError\n\u251c\u2500\u2500 CacheError\n\u251c\u2500\u2500 ConfigurationError\n\u251c\u2500\u2500 MissingDataError\n\u2514\u2500\u2500 PluginError\n</code></pre> <p>All pydeflate exceptions inherit from <code>PydeflateError</code>, allowing you to catch all library-specific errors:</p> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import PydeflateError\n\ntry:\n    result = imf_gdp_deflate(df, base_year=2015, ...)\nexcept PydeflateError as e:\n    print(f\"pydeflate error: {e}\")\n    # Handle any pydeflate-specific error\n</code></pre>"},{"location":"advanced/exceptions/#exception-types","title":"Exception Types","text":""},{"location":"advanced/exceptions/#networkerror","title":"NetworkError","text":"<p>Raised when network operations fail (downloads, API calls).</p> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import NetworkError\nimport time\n\ndef deflate_with_retry(df, max_retries=3):\n    \"\"\"Deflate with automatic retry on network failures.\"\"\"\n    for attempt in range(max_retries):\n        try:\n            return imf_gdp_deflate(\n                data=df,\n                base_year=2015,\n                source_currency=\"USA\",\n                target_currency=\"USA\",\n                update=True,  # Force download\n                ...\n            )\n        except NetworkError as e:\n            if attempt &lt; max_retries - 1:\n                wait_time = 2 ** attempt  # Exponential backoff\n                print(f\"Network error: {e}. Retrying in {wait_time}s...\")\n                time.sleep(wait_time)\n            else:\n                print(f\"Failed after {max_retries} attempts\")\n                raise\n\nresult = deflate_with_retry(df)\n</code></pre> <p>When it occurs:</p> <ul> <li>No internet connection</li> <li>Source server is down (IMF, World Bank, OECD)</li> <li>Request timeout</li> <li>DNS resolution failure</li> </ul> <p>How to handle:</p> <ul> <li>Implement retry logic with exponential backoff</li> <li>Fall back to cached data (if available)</li> <li>Use alternative data source</li> </ul>"},{"location":"advanced/exceptions/#configurationerror","title":"ConfigurationError","text":"<p>Raised for invalid parameters or configuration issues.</p> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import ConfigurationError\n\ntry:\n    result = imf_gdp_deflate(\n        data=df,\n        base_year=\"invalid\",  # Should be int\n        source_currency=\"USA\",\n        target_currency=\"USA\",\n        ...\n    )\nexcept ConfigurationError as e:\n    print(f\"Configuration error: {e}\")\n    # Fix configuration and fail fast\n    raise\n</code></pre> <p>Common causes:</p> <ul> <li>Invalid base year (not an integer)</li> <li>Missing required columns in DataFrame</li> <li>Invalid currency codes</li> <li>Wrong column types (value column not numeric)</li> </ul> <p>How to handle:</p> <ul> <li>Validate inputs before calling pydeflate</li> <li>Log error and fail fast (don't retry)</li> <li>Show user-friendly error message</li> </ul> <pre><code>def validate_and_deflate(df, base_year, id_column, value_column):\n    \"\"\"Validate inputs before deflating.\"\"\"\n    # Validate base year\n    if not isinstance(base_year, int) or base_year &lt; 1960 or base_year &gt; 2030:\n        raise ValueError(f\"Invalid base year: {base_year}\")\n\n    # Validate DataFrame\n    if id_column not in df.columns:\n        raise ValueError(f\"Column '{id_column}' not found in DataFrame\")\n\n    if value_column not in df.columns:\n        raise ValueError(f\"Column '{value_column}' not found in DataFrame\")\n\n    if not df[value_column].dtype.kind in 'iuf':  # int, unsigned, float\n        raise ValueError(f\"Column '{value_column}' must be numeric\")\n\n    try:\n        return imf_gdp_deflate(\n            data=df,\n            base_year=base_year,\n            id_column=id_column,\n            value_column=value_column,\n            ...\n        )\n    except ConfigurationError as e:\n        # Log and re-raise\n        print(f\"Configuration error (should have been caught): {e}\")\n        raise\n</code></pre>"},{"location":"advanced/exceptions/#missingdataerror","title":"MissingDataError","text":"<p>Raised when required deflator or exchange rate data is unavailable for specific country-year combinations.</p> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import MissingDataError\n\ntry:\n    result = imf_gdp_deflate(\n        data=df,\n        base_year=2015,\n        source_currency=\"USA\",\n        target_currency=\"XYZ\",  # Non-existent country\n        ...\n    )\nexcept MissingDataError as e:\n    print(f\"Missing data: {e}\")\n    # Try alternative source or fill gaps\n</code></pre> <p>Note</p> <p>In most cases, pydeflate doesn't raise <code>MissingDataError</code>. Instead, it:</p> <ol> <li>Returns NaN values for missing data</li> <li>Logs warnings with details</li> </ol> <p>The exception is raised only for critical missing data scenarios.</p> <p>Handling missing data:</p> <pre><code>from pydeflate import imf_gdp_deflate, wb_gdp_deflate\n\n# Strategy 1: Filter valid data after conversion\nresult = imf_gdp_deflate(df, ...)\nvalid_result = result.dropna(subset=['target_value_column'])\n\n# Strategy 2: Try alternative source\ntry:\n    result = imf_gdp_deflate(df, ...)\nexcept MissingDataError:\n    print(\"IMF data missing, trying World Bank...\")\n    result = wb_gdp_deflate(df, ...)\n\n# Strategy 3: Fill gaps with custom logic\nresult = imf_gdp_deflate(df, ...)\nresult['target_value_column'].fillna(method='ffill', inplace=True)\n</code></pre>"},{"location":"advanced/exceptions/#datasourceerror","title":"DataSourceError","text":"<p>Raised when data loading or parsing fails.</p> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import DataSourceError\n\ntry:\n    result = imf_gdp_deflate(df, base_year=2015, ...)\nexcept DataSourceError as e:\n    print(f\"Data source error: {e}\")\n    # Log error, possibly use cached data\n</code></pre> <p>Common causes:</p> <ul> <li>Corrupted downloaded file</li> <li>Unexpected data format from source</li> <li>Parsing errors</li> </ul> <p>How to handle:</p> <ul> <li>Delete cached file and retry with <code>update=True</code></li> <li>Report issue to pydeflate maintainers</li> <li>Use alternative source</li> </ul>"},{"location":"advanced/exceptions/#cacheerror","title":"CacheError","text":"<p>Raised when cache operations fail (read/write permissions, disk full).</p> <pre><code>from pydeflate import set_pydeflate_path, imf_gdp_deflate\nfrom pydeflate.exceptions import CacheError\n\ntry:\n    set_pydeflate_path(\"/read-only/path\")  # No write permission\n    result = imf_gdp_deflate(df, base_year=2015, update=True, ...)\nexcept CacheError as e:\n    print(f\"Cache error: {e}\")\n    # Try alternative cache location\n    set_pydeflate_path(\"/tmp/pydeflate_cache\")\n    result = imf_gdp_deflate(df, base_year=2015, update=True, ...)\n</code></pre> <p>Common causes:</p> <ul> <li>No write permission in cache directory</li> <li>Disk full</li> <li>File locked by another process</li> </ul> <p>How to handle:</p> <ul> <li>Check directory permissions</li> <li>Use alternative cache location</li> <li>Clear old cache files</li> </ul>"},{"location":"advanced/exceptions/#schemavalidationerror","title":"SchemaValidationError","text":"<p>Raised when data fails schema validation (if validation is enabled).</p> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import SchemaValidationError\nfrom pydeflate.context import pydeflate_session\n\ntry:\n    with pydeflate_session(enable_validation=True) as ctx:\n        result = imf_gdp_deflate(df, base_year=2015, context=ctx, ...)\nexcept SchemaValidationError as e:\n    print(f\"Validation error: {e}\")\n    # Disable validation or fix data source\n</code></pre> <p>See Schema Validation for more details.</p>"},{"location":"advanced/exceptions/#pluginerror","title":"PluginError","text":"<p>Raised when plugin registration or loading fails.</p> <pre><code>from pydeflate.plugins import register_source\nfrom pydeflate.exceptions import PluginError\n\ntry:\n    @register_source(\"my_source\")\n    class MySource:\n        pass  # Missing required methods\nexcept PluginError as e:\n    print(f\"Plugin error: {e}\")\n    # Fix plugin implementation\n</code></pre> <p>See Plugin System for more details.</p>"},{"location":"advanced/exceptions/#complete-error-handling-example","title":"Complete Error Handling Example","text":"<p>Robust production code with comprehensive error handling:</p> <pre><code>from pydeflate import imf_gdp_deflate, wb_gdp_deflate, set_pydeflate_path\nfrom pydeflate.exceptions import (\n    NetworkError, ConfigurationError, MissingDataError,\n    DataSourceError, CacheError, PydeflateError\n)\nimport pandas as pd\nimport time\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef robust_deflate(\n    df: pd.DataFrame,\n    base_year: int,\n    max_retries: int = 3\n) -&gt; pd.DataFrame:\n    \"\"\"\n    Deflate with comprehensive error handling.\n\n    Strategies:\n    - Retry on network errors\n    - Validate configuration\n    - Fall back to alternative source\n    - Handle missing data gracefully\n    \"\"\"\n\n    # Validate inputs\n    if not isinstance(base_year, int):\n        raise ValueError(f\"base_year must be int, got {type(base_year)}\")\n\n    if 'iso_code' not in df.columns:\n        raise ValueError(\"DataFrame must have 'iso_code' column\")\n\n    if 'value' not in df.columns:\n        raise ValueError(\"DataFrame must have 'value' column\")\n\n    # Set cache directory\n    try:\n        set_pydeflate_path(\"./pydeflate_data\")\n    except CacheError:\n        logger.warning(\"Default cache failed, using /tmp\")\n        set_pydeflate_path(\"/tmp/pydeflate_cache\")\n\n    # Attempt deflation with retry\n    for attempt in range(max_retries):\n        try:\n            result = imf_gdp_deflate(\n                data=df,\n                base_year=base_year,\n                source_currency=\"USA\",\n                target_currency=\"USA\",\n                id_column=\"iso_code\",\n                value_column=\"value\",\n                target_value_column=\"value_constant\"\n            )\n\n            # Check for missing data\n            missing_count = result['value_constant'].isna().sum()\n            if missing_count &gt; 0:\n                logger.warning(f\"{missing_count} rows have missing data\")\n\n            return result\n\n        except ConfigurationError as e:\n            # Don't retry configuration errors\n            logger.error(f\"Configuration error: {e}\")\n            raise\n\n        except NetworkError as e:\n            if attempt &lt; max_retries - 1:\n                wait_time = 2 ** attempt\n                logger.warning(f\"Network error: {e}. Retry {attempt+1}/{max_retries} in {wait_time}s\")\n                time.sleep(wait_time)\n            else:\n                logger.error(f\"Network failed after {max_retries} attempts, trying World Bank\")\n                try:\n                    return wb_gdp_deflate(\n                        data=df,\n                        base_year=base_year,\n                        source_currency=\"USA\",\n                        target_currency=\"USA\",\n                        id_column=\"iso_code\",\n                        value_column=\"value\",\n                        target_value_column=\"value_constant\"\n                    )\n                except PydeflateError as wb_error:\n                    logger.error(f\"World Bank also failed: {wb_error}\")\n                    raise\n\n        except (DataSourceError, MissingDataError) as e:\n            logger.warning(f\"Data source issue: {e}, trying World Bank\")\n            return wb_gdp_deflate(\n                data=df,\n                base_year=base_year,\n                source_currency=\"USA\",\n                target_currency=\"USA\",\n                id_column=\"iso_code\",\n                value_column=\"value\",\n                target_value_column=\"value_constant\"\n            )\n\n# Usage\ndata = {\n    'iso_code': ['USA', 'GBR', 'FRA'],\n    'year': [2015, 2016, 2017],\n    'value': [1000, 1100, 1200]\n}\ndf = pd.DataFrame(data)\n\ntry:\n    result = robust_deflate(df, base_year=2015)\n    print(result)\nexcept Exception as e:\n    logger.error(f\"Failed to deflate: {e}\")\n</code></pre>"},{"location":"advanced/exceptions/#best-practices","title":"Best Practices","text":""},{"location":"advanced/exceptions/#1-catch-specific-exceptions","title":"1. Catch Specific Exceptions","text":"<pre><code># Good: Specific exception handling\ntry:\n    result = imf_gdp_deflate(df, ...)\nexcept NetworkError:\n    # Retry logic\n    pass\nexcept ConfigurationError:\n    # Fail fast\n    raise\nexcept PydeflateError:\n    # Other pydeflate errors\n    pass\n\n# Bad: Catching everything\ntry:\n    result = imf_gdp_deflate(df, ...)\nexcept Exception:\n    pass  # What went wrong?\n</code></pre>"},{"location":"advanced/exceptions/#2-log-errors-with-context","title":"2. Log Errors with Context","text":"<pre><code>import logging\n\nlogger = logging.getLogger(__name__)\n\ntry:\n    result = imf_gdp_deflate(df, base_year=2015, ...)\nexcept PydeflateError as e:\n    logger.error(\n        f\"Deflation failed: {e}\",\n        extra={\n            'base_year': 2015,\n            'num_rows': len(df),\n            'error_type': type(e).__name__\n        }\n    )\n    raise\n</code></pre>"},{"location":"advanced/exceptions/#3-provide-fallbacks","title":"3. Provide Fallbacks","text":"<pre><code>def deflate_with_fallback(df, source='imf'):\n    \"\"\"Try primary source, fall back to secondary.\"\"\"\n    sources = ['imf', 'wb', 'dac']\n\n    for src in sources:\n        try:\n            if src == 'imf':\n                return imf_gdp_deflate(df, ...)\n            elif src == 'wb':\n                return wb_gdp_deflate(df, ...)\n            elif src == 'dac':\n                return oecd_dac_deflate(df, ...)\n        except PydeflateError as e:\n            logger.warning(f\"{src} failed: {e}\")\n            continue\n\n    raise RuntimeError(\"All sources failed\")\n</code></pre>"},{"location":"advanced/exceptions/#next-steps","title":"Next Steps","text":"<ul> <li>Context Management - Advanced configuration and parallel operations</li> <li>Schema Validation - Enable data quality checks</li> <li>Plugin System - Create custom data sources with error handling</li> </ul>"},{"location":"advanced/plugins/","title":"Plugin System","text":"<p>pydeflate v2.2+ includes a plugin system for registering custom data sources without modifying the package code. This enables integration with proprietary data, alternative public sources, or custom calculations.</p>"},{"location":"advanced/plugins/#why-use-plugins","title":"Why Use Plugins?","text":"<p>Built-in sources (IMF, World Bank, OECD DAC) may not cover all use cases:</p> <ul> <li>Regional central bank data</li> <li>Proprietary economic forecasts</li> <li>Custom deflator calculations</li> <li>Alternative exchange rate sources</li> <li>Internal company data</li> </ul> <p>Plugins let you extend pydeflate with custom sources while maintaining the same API.</p>"},{"location":"advanced/plugins/#quick-start","title":"Quick Start","text":"<p>Here's a minimal plugin:</p> <pre><code>from pydeflate.plugins import register_source\nimport pandas as pd\n\n@register_source(\"my_central_bank\")\nclass MyCentralBankSource:\n    \"\"\"Custom source from my central bank.\"\"\"\n\n    def __init__(self, update: bool = False):\n        self.name = \"my_central_bank\"\n        self._idx = [\"pydeflate_year\", \"pydeflate_entity_code\", \"pydeflate_iso3\"]\n        self.data = self._load_data(update)\n\n    def _load_data(self, update: bool) -&gt; pd.DataFrame:\n        \"\"\"Load data from central bank API or file.\"\"\"\n        # Example: Load from CSV\n        return pd.read_csv(\"central_bank_data.csv\")\n\n    def lcu_usd_exchange(self) -&gt; pd.DataFrame:\n        \"\"\"Return exchange rate data.\"\"\"\n        return self.data[self._idx + [\"pydeflate_EXCHANGE\"]]\n\n    def price_deflator(self, kind: str = \"NGDP_D\") -&gt; pd.DataFrame:\n        \"\"\"Return deflator data.\"\"\"\n        return self.data[self._idx + [f\"pydeflate_{kind}\"]]\n\n    def validate(self) -&gt; None:\n        \"\"\"Validate data format.\"\"\"\n        required_cols = self._idx + [\"pydeflate_EXCHANGE\", \"pydeflate_NGDP_D\"]\n        missing = [c for c in required_cols if c not in self.data.columns]\n        if missing:\n            raise ValueError(f\"Missing columns: {missing}\")\n\n# Plugin is now registered and ready to use\n</code></pre>"},{"location":"advanced/plugins/#plugin-interface","title":"Plugin Interface","text":"<p>Plugins must implement the <code>SourceProtocol</code>:</p>"},{"location":"advanced/plugins/#required-methods","title":"Required Methods","text":""},{"location":"advanced/plugins/#__init__self-update-bool-false","title":"<code>__init__(self, update: bool = False)</code>","text":"<p>Initialize the source and load data.</p> <p>Parameters: - <code>update</code>: If <code>True</code>, download fresh data. If <code>False</code>, use cached data.</p> <p>Required attributes: - <code>self.name</code>: Source name (string) - <code>self._idx</code>: Index columns (must be <code>[\"pydeflate_year\", \"pydeflate_entity_code\", \"pydeflate_iso3\"]</code>) - <code>self.data</code>: DataFrame with deflator/exchange data</p>"},{"location":"advanced/plugins/#lcu_usd_exchange-pddataframe","title":"<code>lcu_usd_exchange() -&gt; pd.DataFrame</code>","text":"<p>Return exchange rates from local currency to USD.</p> <p>Returns: DataFrame with columns: - <code>pydeflate_year</code> - <code>pydeflate_entity_code</code> - <code>pydeflate_iso3</code> - <code>pydeflate_EXCHANGE</code>: LCU per USD</p>"},{"location":"advanced/plugins/#price_deflatorkind-str-pddataframe","title":"<code>price_deflator(kind: str) -&gt; pd.DataFrame</code>","text":"<p>Return price deflator data.</p> <p>Parameters: - <code>kind</code>: Deflator type (e.g., <code>\"NGDP_D\"</code> for GDP deflator, <code>\"PCPI\"</code> for CPI)</p> <p>Returns: DataFrame with columns: - <code>pydeflate_year</code> - <code>pydeflate_entity_code</code> - <code>pydeflate_iso3</code> - <code>pydeflate_{kind}</code>: Deflator index</p>"},{"location":"advanced/plugins/#validate-none","title":"<code>validate() -&gt; None</code>","text":"<p>Validate data format and completeness.</p> <p>Raises: Exception if validation fails</p>"},{"location":"advanced/plugins/#complete-example","title":"Complete Example","text":"<p>A production-ready plugin with caching, error handling, and multiple deflators:</p> <pre><code>from pydeflate.plugins import register_source\nfrom pydeflate.exceptions import DataSourceError, NetworkError\nimport pandas as pd\nimport requests\nfrom pathlib import Path\nimport json\n\n@register_source(\"eurostat\")\nclass EurostatSource:\n    \"\"\"\n    Custom source using Eurostat data.\n\n    Provides GDP deflators and exchange rates for EU countries.\n    \"\"\"\n\n    def __init__(self, update: bool = False):\n        self.name = \"eurostat\"\n        self._idx = [\"pydeflate_year\", \"pydeflate_entity_code\", \"pydeflate_iso3\"]\n\n        # Cache directory\n        self.cache_dir = Path.home() / \".pydeflate\" / \"eurostat\"\n        self.cache_dir.mkdir(parents=True, exist_ok=True)\n\n        # Load or download data\n        self.data = self._load_or_fetch(update)\n\n        # Validate\n        self.validate()\n\n    def _load_or_fetch(self, update: bool) -&gt; pd.DataFrame:\n        \"\"\"Load from cache or fetch from Eurostat API.\"\"\"\n        cache_file = self.cache_dir / \"eurostat_data.parquet\"\n\n        # Try cache first\n        if not update and cache_file.exists():\n            try:\n                return pd.read_parquet(cache_file)\n            except Exception as e:\n                raise DataSourceError(f\"Failed to load cached data: {e}\")\n\n        # Fetch from API\n        try:\n            data = self._fetch_from_api()\n            # Save to cache\n            data.to_parquet(cache_file)\n            return data\n        except Exception as e:\n            raise NetworkError(f\"Failed to fetch Eurostat data: {e}\")\n\n    def _fetch_from_api(self) -&gt; pd.DataFrame:\n        \"\"\"Fetch data from Eurostat API.\"\"\"\n        # Example API call (simplified)\n        url = \"https://ec.europa.eu/eurostat/api/dissemination/...\"\n\n        response = requests.get(url, timeout=30)\n        response.raise_for_status()\n\n        # Parse response (simplified)\n        raw_data = response.json()\n\n        # Transform to pydeflate format\n        return self._transform_data(raw_data)\n\n    def _transform_data(self, raw_data: dict) -&gt; pd.DataFrame:\n        \"\"\"Transform Eurostat data to pydeflate format.\"\"\"\n        # Example transformation\n        records = []\n\n        for country in raw_data['countries']:\n            iso3 = country['iso3']\n            entity_code = country['code']\n\n            for year_data in country['time_series']:\n                year = int(year_data['year'])\n                gdp_deflator = year_data.get('gdp_deflator', None)\n                exchange_rate = year_data.get('exchange_rate', None)\n\n                records.append({\n                    'pydeflate_year': year,\n                    'pydeflate_entity_code': entity_code,\n                    'pydeflate_iso3': iso3,\n                    'pydeflate_NGDP_D': gdp_deflator,\n                    'pydeflate_EXCHANGE': exchange_rate\n                })\n\n        return pd.DataFrame(records)\n\n    def lcu_usd_exchange(self) -&gt; pd.DataFrame:\n        \"\"\"Return EUR/USD and other EU exchange rates.\"\"\"\n        return self.data[self._idx + [\"pydeflate_EXCHANGE\"]]\n\n    def price_deflator(self, kind: str = \"NGDP_D\") -&gt; pd.DataFrame:\n        \"\"\"Return price deflator (GDP deflator by default).\"\"\"\n        col_name = f\"pydeflate_{kind}\"\n\n        if col_name not in self.data.columns:\n            raise ValueError(f\"Deflator type '{kind}' not available in Eurostat source\")\n\n        return self.data[self._idx + [col_name]]\n\n    def validate(self) -&gt; None:\n        \"\"\"Validate data format.\"\"\"\n        # Check required columns\n        required = self._idx + [\"pydeflate_EXCHANGE\", \"pydeflate_NGDP_D\"]\n        missing = [c for c in required if c not in self.data.columns]\n\n        if missing:\n            raise DataSourceError(f\"Missing required columns: {missing}\")\n\n        # Check for data\n        if len(self.data) == 0:\n            raise DataSourceError(\"No data loaded\")\n\n        # Check data types\n        if not pd.api.types.is_numeric_dtype(self.data[\"pydeflate_EXCHANGE\"]):\n            raise DataSourceError(\"Exchange rate column must be numeric\")\n\n        # Check for nulls in critical columns\n        null_counts = self.data[self._idx].isnull().sum()\n        if null_counts.any():\n            raise DataSourceError(f\"Null values in index columns: {null_counts[null_counts &gt; 0]}\")\n\n# Usage\nfrom pydeflate import BaseDeflate\n\n# The plugin is automatically registered\n# Now you can use it like built-in sources\nsource = EurostatSource(update=True)\nprint(f\"Loaded {len(source.data)} records from Eurostat\")\n</code></pre>"},{"location":"advanced/plugins/#using-custom-sources","title":"Using Custom Sources","text":""},{"location":"advanced/plugins/#list-available-sources","title":"List Available Sources","text":"<pre><code>from pydeflate.plugins import list_sources\n\nsources = list_sources()\nprint(sources)\n# ['DAC', 'IMF', 'World Bank', 'my_central_bank', 'eurostat']\n</code></pre>"},{"location":"advanced/plugins/#check-if-source-is-registered","title":"Check if Source is Registered","text":"<pre><code>from pydeflate.plugins import is_source_registered\n\nif is_source_registered(\"eurostat\"):\n    print(\"Eurostat plugin available\")\n</code></pre>"},{"location":"advanced/plugins/#get-source-instance","title":"Get Source Instance","text":"<pre><code>from pydeflate.plugins import get_source\n\n# Get instance of custom source\neurostat = get_source(\"eurostat\", update=False)\n\n# Access data\nexchange_data = eurostat.lcu_usd_exchange()\ndeflator_data = eurostat.price_deflator(\"NGDP_D\")\n</code></pre>"},{"location":"advanced/plugins/#use-with-basedeflate","title":"Use with BaseDeflate","text":"<p>Integrate custom source with pydeflate's deflation engine:</p> <pre><code>from pydeflate.core.api import BaseDeflate\nfrom pydeflate.plugins import get_source\nimport pandas as pd\n\n# Get custom source\neurostat = get_source(\"eurostat\")\n\n# Create deflator using custom source\ndeflator = BaseDeflate(source=eurostat)\n\n# Your data\ndata = {\n    'country': ['FRA', 'DEU', 'ITA'],\n    'year': [2015, 2016, 2017],\n    'value': [1000, 1100, 1200]\n}\ndf = pd.DataFrame(data)\n\n# Deflate using custom source\nresult = deflator.deflate(\n    data=df,\n    base_year=2015,\n    source_currency=\"FRA\",\n    target_currency=\"USA\",\n    id_column=\"country\",\n    value_column=\"value\",\n    target_value_column=\"value_constant\"\n)\n\nprint(result)\n</code></pre>"},{"location":"advanced/plugins/#data-format-requirements","title":"Data Format Requirements","text":"<p>Your plugin's data must follow pydeflate's schema:</p>"},{"location":"advanced/plugins/#index-columns-required","title":"Index Columns (Required)","text":"<pre><code>self._idx = [\n    \"pydeflate_year\",         # int: Year\n    \"pydeflate_entity_code\",  # str: Source-specific country code\n    \"pydeflate_iso3\"          # str: ISO3 country code\n]\n</code></pre>"},{"location":"advanced/plugins/#exchange-rate-column-required","title":"Exchange Rate Column (Required)","text":"<pre><code>\"pydeflate_EXCHANGE\"  # float: Local currency per USD\n</code></pre>"},{"location":"advanced/plugins/#deflator-columns-at-least-one-required","title":"Deflator Columns (At Least One Required)","text":"<pre><code>\"pydeflate_NGDP_D\"   # float: GDP deflator (index)\n\"pydeflate_PCPI\"     # float: CPI (index)\n\"pydeflate_PCPIE\"    # float: CPI end-of-period (index)\n# ... add custom deflator types\n</code></pre>"},{"location":"advanced/plugins/#example-data-structure","title":"Example Data Structure","text":"<pre><code>data = pd.DataFrame({\n    'pydeflate_year': [2015, 2016, 2017],\n    'pydeflate_entity_code': ['USA', 'USA', 'USA'],\n    'pydeflate_iso3': ['USA', 'USA', 'USA'],\n    'pydeflate_EXCHANGE': [1.0, 1.0, 1.0],  # USD to USD\n    'pydeflate_NGDP_D': [100.0, 102.0, 104.0],\n    'pydeflate_PCPI': [100.0, 101.5, 103.2]\n})\n</code></pre>"},{"location":"advanced/plugins/#error-handling-in-plugins","title":"Error Handling in Plugins","text":"<p>Use pydeflate's exception hierarchy:</p> <pre><code>from pydeflate.plugins import register_source\nfrom pydeflate.exceptions import (\n    DataSourceError,\n    NetworkError,\n    SchemaValidationError\n)\n\n@register_source(\"my_source\")\nclass MySource:\n    def __init__(self, update: bool = False):\n        try:\n            self.data = self._load_data(update)\n        except requests.RequestException as e:\n            raise NetworkError(f\"Failed to download data: {e}\")\n        except ValueError as e:\n            raise DataSourceError(f\"Data parsing error: {e}\")\n\n        self.validate()\n\n    def validate(self):\n        \"\"\"Validate data.\"\"\"\n        if self.data.empty:\n            raise DataSourceError(\"No data loaded\")\n\n        required_cols = [\"pydeflate_year\", \"pydeflate_iso3\", \"pydeflate_EXCHANGE\"]\n        missing = [c for c in required_cols if c not in self.data.columns]\n\n        if missing:\n            raise SchemaValidationError(f\"Missing required columns: {missing}\")\n</code></pre>"},{"location":"advanced/plugins/#testing-plugins","title":"Testing Plugins","text":"<p>Write tests for your custom source:</p> <pre><code>import pytest\nfrom pydeflate.plugins import get_source, is_source_registered\n\ndef test_plugin_registered():\n    \"\"\"Test plugin is registered.\"\"\"\n    assert is_source_registered(\"my_central_bank\")\n\ndef test_plugin_loads_data():\n    \"\"\"Test plugin loads data correctly.\"\"\"\n    source = get_source(\"my_central_bank\", update=False)\n\n    # Check attributes\n    assert source.name == \"my_central_bank\"\n    assert hasattr(source, 'data')\n    assert len(source.data) &gt; 0\n\ndef test_exchange_rates():\n    \"\"\"Test exchange rate data format.\"\"\"\n    source = get_source(\"my_central_bank\")\n    exchange_data = source.lcu_usd_exchange()\n\n    # Check columns\n    assert \"pydeflate_year\" in exchange_data.columns\n    assert \"pydeflate_iso3\" in exchange_data.columns\n    assert \"pydeflate_EXCHANGE\" in exchange_data.columns\n\n    # Check data types\n    assert exchange_data[\"pydeflate_EXCHANGE\"].dtype == float\n\ndef test_deflator():\n    \"\"\"Test deflator data format.\"\"\"\n    source = get_source(\"my_central_bank\")\n    deflator_data = source.price_deflator(\"NGDP_D\")\n\n    # Check columns\n    assert \"pydeflate_NGDP_D\" in deflator_data.columns\n\n    # Check values are positive\n    assert (deflator_data[\"pydeflate_NGDP_D\"] &gt; 0).all()\n\ndef test_validation():\n    \"\"\"Test validation catches errors.\"\"\"\n    source = get_source(\"my_central_bank\")\n\n    # Should not raise\n    source.validate()\n</code></pre>"},{"location":"advanced/plugins/#best-practices","title":"Best Practices","text":""},{"location":"advanced/plugins/#1-use-caching","title":"1. Use Caching","text":"<p>Download data once, cache for reuse:</p> <pre><code>def _load_or_fetch(self, update: bool):\n    cache_file = self.cache_dir / \"data.parquet\"\n\n    if not update and cache_file.exists():\n        return pd.read_parquet(cache_file)\n\n    data = self._fetch_from_api()\n    data.to_parquet(cache_file)\n    return data\n</code></pre>"},{"location":"advanced/plugins/#2-handle-missing-data","title":"2. Handle Missing Data","text":"<pre><code>def price_deflator(self, kind: str = \"NGDP_D\"):\n    col_name = f\"pydeflate_{kind}\"\n\n    if col_name not in self.data.columns:\n        raise ValueError(f\"Deflator '{kind}' not available\")\n\n    return self.data[self._idx + [col_name]]\n</code></pre>"},{"location":"advanced/plugins/#3-validate-thoroughly","title":"3. Validate Thoroughly","text":"<pre><code>def validate(self):\n    # Check structure\n    if self.data.empty:\n        raise DataSourceError(\"No data\")\n\n    # Check columns\n    required = self._idx + [\"pydeflate_EXCHANGE\"]\n    missing = [c for c in required if c not in self.data.columns]\n    if missing:\n        raise SchemaValidationError(f\"Missing: {missing}\")\n\n    # Check data quality\n    if (self.data[\"pydeflate_EXCHANGE\"] &lt;= 0).any():\n        raise DataSourceError(\"Exchange rates must be positive\")\n</code></pre>"},{"location":"advanced/plugins/#4-document-your-plugin","title":"4. Document Your Plugin","text":"<pre><code>@register_source(\"ecb\")\nclass ECBSource:\n    \"\"\"\n    European Central Bank data source.\n\n    Provides:\n    - EUR/USD and other major currency exchange rates\n    - HICP (Harmonized Index of Consumer Prices) for EU countries\n\n    Data coverage:\n    - Countries: EU27 + UK, Switzerland, Norway\n    - Time range: 1999-present\n    - Update frequency: Daily (exchange rates), Monthly (HICP)\n\n    Usage:\n        &gt;&gt;&gt; from pydeflate.plugins import get_source\n        &gt;&gt;&gt; ecb = get_source(\"ecb\", update=True)\n        &gt;&gt;&gt; rates = ecb.lcu_usd_exchange()\n    \"\"\"\n</code></pre>"},{"location":"advanced/plugins/#next-steps","title":"Next Steps","text":"<ul> <li>Error Handling - Handle plugin errors gracefully</li> <li>Context Management - Use plugins with custom contexts</li> <li>Schema Validation - Validate plugin data</li> </ul>"},{"location":"advanced/validation/","title":"Schema Validation","text":"<p>pydeflate v2.2+ includes optional schema validation using Pandera. When enabled, it validates data from sources (IMF, World Bank, OECD DAC) against predefined schemas to catch data quality issues early.</p>"},{"location":"advanced/validation/#why-use-validation","title":"Why Use Validation?","text":"<p>Schema validation helps detect:</p> <ul> <li>Type errors: Wrong data types in columns</li> <li>Missing values: Unexpected NaNs in critical fields</li> <li>Range violations: Exchange rates \u2264 0, years outside expected range</li> <li>Schema changes: Source APIs changing their data structure</li> </ul> <p>This is especially useful in production environments where data quality is critical.</p>"},{"location":"advanced/validation/#enabling-validation","title":"Enabling Validation","text":""},{"location":"advanced/validation/#method-1-environment-variable","title":"Method 1: Environment Variable","text":"<pre><code>export PYDEFLATE_ENABLE_VALIDATION=1\n</code></pre> <p>Then validation is enabled for all operations:</p> <pre><code>from pydeflate import imf_gdp_deflate\n\n# Validation automatically enabled\nresult = imf_gdp_deflate(df, base_year=2015, ...)\n</code></pre>"},{"location":"advanced/validation/#method-2-context-manager","title":"Method 2: Context Manager","text":"<pre><code>from pydeflate.context import pydeflate_session\nfrom pydeflate import imf_gdp_deflate\n\nwith pydeflate_session(enable_validation=True) as ctx:\n    # Validation enabled in this context\n    result = imf_gdp_deflate(\n        data=df,\n        base_year=2015,\n        context=ctx,\n        ...\n    )\n</code></pre>"},{"location":"advanced/validation/#method-3-default-context","title":"Method 3: Default Context","text":"<pre><code>from pydeflate.context import PydeflateContext, set_default_context\nfrom pydeflate import imf_gdp_deflate\n\n# Enable validation globally\nctx = PydeflateContext.create(enable_validation=True)\nset_default_context(ctx)\n\n# All operations validate\nresult = imf_gdp_deflate(df, base_year=2015, ...)\n</code></pre>"},{"location":"advanced/validation/#what-gets-validated","title":"What Gets Validated?","text":""},{"location":"advanced/validation/#imf-data","title":"IMF Data","text":"<p>Schema for IMF World Economic Outlook data:</p> <pre><code># pydeflate_year: int, 1980-2030\n# pydeflate_iso3: str, ISO3 codes\n# pydeflate_entity_code: str, IMF entity codes\n# pydeflate_EXCHANGE: float, &gt; 0\n# pydeflate_NGDP_D: float, &gt; 0 (GDP deflator)\n# pydeflate_PCPI: float, &gt; 0 (CPI)\n# pydeflate_PCPIE: float, &gt; 0 (CPI end-of-period)\n</code></pre> <p>Checks:</p> <ul> <li>Year range: 1980-2030</li> <li>Exchange rates and deflators are positive</li> <li>ISO3 codes are valid 3-letter strings</li> <li>No null values in critical columns</li> </ul>"},{"location":"advanced/validation/#world-bank-data","title":"World Bank Data","text":"<p>Schema for World Bank data:</p> <pre><code># pydeflate_year: int, 1960-2030\n# pydeflate_iso3: str, ISO3 codes\n# pydeflate_entity_code: str, WB country codes\n# pydeflate_EXCHANGE: float, &gt; 0\n# pydeflate_NGDP_D: float, &gt; 0\n# pydeflate_GDP_D_LINKED: float, &gt; 0 (linked deflator)\n# pydeflate_PCPI: float, &gt; 0\n</code></pre> <p>Checks:</p> <ul> <li>Year range: 1960-2030</li> <li>Positive values for rates and deflators</li> <li>Valid country codes</li> <li>No unexpected nulls</li> </ul>"},{"location":"advanced/validation/#oecd-dac-data","title":"OECD DAC Data","text":"<p>Schema for OECD DAC data:</p> <pre><code># pydeflate_year: int, 1960-2030\n# pydeflate_iso3: str, ISO3 codes\n# pydeflate_entity_code: int, DAC codes\n# pydeflate_EXCHANGE: float, &gt; 0\n# pydeflate_DAC_DEFLATOR: float, &gt; 0\n</code></pre> <p>Checks:</p> <ul> <li>Year range: 1960-2030</li> <li>DAC entity codes are integers</li> <li>Positive exchange rates and deflators</li> <li>Valid ISO3 codes</li> </ul>"},{"location":"advanced/validation/#handling-validation-errors","title":"Handling Validation Errors","text":"<p>When validation fails, a <code>SchemaValidationError</code> is raised:</p> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import SchemaValidationError\nfrom pydeflate.context import pydeflate_session\n\ntry:\n    with pydeflate_session(enable_validation=True) as ctx:\n        result = imf_gdp_deflate(\n            data=df,\n            base_year=2015,\n            context=ctx,\n            ...\n        )\nexcept SchemaValidationError as e:\n    print(f\"Validation failed: {e}\")\n    # Option 1: Disable validation and retry\n    # Option 2: Report to pydeflate maintainers\n    # Option 3: Use alternative source\n</code></pre>"},{"location":"advanced/validation/#example-graceful-degradation","title":"Example: Graceful Degradation","text":"<pre><code>from pydeflate import imf_gdp_deflate, wb_gdp_deflate\nfrom pydeflate.exceptions import SchemaValidationError\nfrom pydeflate.context import pydeflate_session\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef deflate_with_validation(df, base_year):\n    \"\"\"Try with validation, fall back without if it fails.\"\"\"\n\n    # Try with validation\n    try:\n        with pydeflate_session(enable_validation=True) as ctx:\n            return imf_gdp_deflate(\n                data=df,\n                base_year=base_year,\n                context=ctx,\n                source_currency=\"USA\",\n                target_currency=\"USA\",\n                ...\n            )\n\n    except SchemaValidationError as e:\n        logger.warning(f\"IMF validation failed: {e}\")\n        logger.info(\"Trying World Bank without validation\")\n\n        # Fall back to World Bank, no validation\n        with pydeflate_session(enable_validation=False) as ctx:\n            return wb_gdp_deflate(\n                data=df,\n                base_year=base_year,\n                context=ctx,\n                source_currency=\"USA\",\n                target_currency=\"USA\",\n                ...\n            )\n\nresult = deflate_with_validation(df, base_year=2015)\n</code></pre>"},{"location":"advanced/validation/#performance-impact","title":"Performance Impact","text":"<p>Schema validation adds overhead:</p> <ul> <li>With validation: ~10-20% slower (varies by data size)</li> <li>Without validation: Full speed</li> </ul> <pre><code>import time\nfrom pydeflate import imf_gdp_deflate\nfrom pydeflate.context import pydeflate_session\n\n# Without validation\nstart = time.time()\nwith pydeflate_session(enable_validation=False) as ctx:\n    result = imf_gdp_deflate(df, base_year=2015, context=ctx, ...)\nno_validation_time = time.time() - start\n\n# With validation\nstart = time.time()\nwith pydeflate_session(enable_validation=True) as ctx:\n    result = imf_gdp_deflate(df, base_year=2015, context=ctx, ...)\nvalidation_time = time.time() - start\n\nprint(f\"Without validation: {no_validation_time:.2f}s\")\nprint(f\"With validation: {validation_time:.2f}s\")\nprint(f\"Overhead: {(validation_time/no_validation_time - 1) * 100:.1f}%\")\n</code></pre>"},{"location":"advanced/validation/#when-to-enable-validation","title":"When to Enable Validation","text":""},{"location":"advanced/validation/#enable-in","title":"Enable in:","text":"<ul> <li>Production environments: Catch data issues before they affect results</li> <li>Automated pipelines: Fail fast on data problems</li> <li>Initial development: Understand data structure and constraints</li> <li>After source updates: Verify new data matches expected schema</li> </ul>"},{"location":"advanced/validation/#disable-in","title":"Disable in:","text":"<ul> <li>Performance-critical applications: Minimize overhead</li> <li>Trusted environments: Data quality already verified</li> <li>Development/testing: Faster iteration</li> <li>Batch processing: Validate once, then disable</li> </ul>"},{"location":"advanced/validation/#custom-validation-for-plugins","title":"Custom Validation for Plugins","text":"<p>Add validation to your custom sources:</p> <pre><code>from pydeflate.plugins import register_source\nfrom pydeflate.exceptions import SchemaValidationError\nimport pandas as pd\nimport pandera as pa\n\n@register_source(\"my_source\")\nclass MySource:\n    \"\"\"Custom source with validation.\"\"\"\n\n    # Define schema\n    SCHEMA = pa.DataFrameSchema({\n        \"pydeflate_year\": pa.Column(int, pa.Check.between(1960, 2030)),\n        \"pydeflate_iso3\": pa.Column(str, pa.Check.str_length(3)),\n        \"pydeflate_entity_code\": pa.Column(str),\n        \"pydeflate_EXCHANGE\": pa.Column(float, pa.Check.greater_than(0)),\n        \"pydeflate_NGDP_D\": pa.Column(float, pa.Check.greater_than(0))\n    })\n\n    def __init__(self, update: bool = False):\n        self.name = \"my_source\"\n        self._idx = [\"pydeflate_year\", \"pydeflate_entity_code\", \"pydeflate_iso3\"]\n        self.data = self._load_data(update)\n\n        # Validate\n        self.validate()\n\n    def validate(self):\n        \"\"\"Validate data against schema.\"\"\"\n        try:\n            self.SCHEMA.validate(self.data)\n        except pa.errors.SchemaError as e:\n            raise SchemaValidationError(f\"Schema validation failed: {e}\")\n\n    def lcu_usd_exchange(self):\n        return self.data[self._idx + [\"pydeflate_EXCHANGE\"]]\n\n    def price_deflator(self, kind=\"NGDP_D\"):\n        return self.data[self._idx + [f\"pydeflate_{kind}\"]]\n</code></pre>"},{"location":"advanced/validation/#inspecting-schemas","title":"Inspecting Schemas","text":"<p>View the schemas used by pydeflate:</p> <pre><code>from pydeflate.schemas import IMFDataSchema, WorldBankDataSchema, DACDataSchema\n\n# IMF schema\nprint(\"IMF Schema:\")\nprint(IMFDataSchema.to_yaml())\n\n# World Bank schema\nprint(\"\\nWorld Bank Schema:\")\nprint(WorldBankDataSchema.to_yaml())\n\n# DAC schema\nprint(\"\\nDAC Schema:\")\nprint(DACDataSchema.to_yaml())\n</code></pre>"},{"location":"advanced/validation/#validation-in-testing","title":"Validation in Testing","text":"<p>Use validation to ensure test data matches production:</p> <pre><code>import pytest\nfrom pydeflate.context import pydeflate_session\nfrom pydeflate import imf_gdp_deflate\nfrom pydeflate.exceptions import SchemaValidationError\n\ndef test_deflation_with_validation():\n    \"\"\"Test deflation with schema validation.\"\"\"\n\n    # Arrange\n    data = {\n        'country': ['USA', 'GBR'],\n        'year': [2015, 2016],\n        'value': [1000, 1100]\n    }\n    df = pd.DataFrame(data)\n\n    # Act &amp; Assert\n    with pydeflate_session(enable_validation=True) as ctx:\n        # Should not raise SchemaValidationError\n        result = imf_gdp_deflate(\n            data=df,\n            base_year=2015,\n            context=ctx,\n            source_currency=\"USA\",\n            target_currency=\"USA\",\n            id_column=\"country\",\n            value_column=\"value\",\n            target_value_column=\"value_constant\"\n        )\n\n    assert 'value_constant' in result.columns\n\ndef test_invalid_data_raises_validation_error():\n    \"\"\"Test that invalid source data raises SchemaValidationError.\"\"\"\n\n    # This test would need to mock invalid data from source\n    # Example structure:\n    with pydeflate_session(enable_validation=True) as ctx:\n        # If source data is invalid, should raise\n        with pytest.raises(SchemaValidationError):\n            # ... operation that triggers validation error\n            pass\n</code></pre>"},{"location":"advanced/validation/#production-example","title":"Production Example","text":"<p>Comprehensive production setup with validation:</p> <pre><code>from pydeflate import imf_gdp_deflate\nfrom pydeflate.context import PydeflateContext, set_default_context\nfrom pydeflate.exceptions import SchemaValidationError, PydeflateError\nimport logging\nimport os\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n# Configure based on environment\nenv = os.getenv(\"ENVIRONMENT\", \"development\")\n\nif env == \"production\":\n    # Enable validation in production\n    ctx = PydeflateContext.create(\n        data_dir=\"/var/lib/app/pydeflate\",\n        log_level=logging.WARNING,\n        enable_validation=True  # Strict validation\n    )\nelif env == \"development\":\n    # No validation in dev for speed\n    ctx = PydeflateContext.create(\n        data_dir=\"./dev_cache\",\n        log_level=logging.DEBUG,\n        enable_validation=False\n    )\n\nset_default_context(ctx)\n\n# Application code\ndef process_data(df):\n    \"\"\"Process data with validation in production.\"\"\"\n    try:\n        result = imf_gdp_deflate(\n            data=df,\n            base_year=2015,\n            source_currency=\"USA\",\n            target_currency=\"USA\",\n            ...\n        )\n\n        logger.info(f\"Successfully processed {len(result)} rows\")\n        return result\n\n    except SchemaValidationError as e:\n        # Validation failed - data quality issue\n        logger.error(f\"Schema validation failed: {e}\")\n        logger.error(\"Source data does not match expected schema\")\n        # Alert monitoring system\n        raise\n\n    except PydeflateError as e:\n        logger.error(f\"Deflation error: {e}\")\n        raise\n\n# Run\nif __name__ == \"__main__\":\n    df = load_data()  # Your data loading\n    result = process_data(df)\n    save_results(result)\n</code></pre>"},{"location":"advanced/validation/#next-steps","title":"Next Steps","text":"<ul> <li>Error Handling - Handle validation errors gracefully</li> <li>Context Management - Configure validation via contexts</li> <li>Plugin System - Add validation to custom sources</li> </ul>"}]}